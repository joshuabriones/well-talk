generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model counselor {
  counselorId Int     @id @default(autoincrement())
  userId      Int     @unique(map: "Counselor_userId_key")
  isDeleted   Boolean @default(false)
  user        user    @relation(fields: [userId], references: [id], map: "Counselor_userId_fkey")
}

model student {
  studentId      Int              @id @default(autoincrement())
  userId         Int              @unique(map: "Student_userId_key")
  college        String
  program        String
  year           Int
  birthDate      DateTime
  contactNumber  String?
  address        String?
  isDeleted      Boolean          @default(false)
  user           user             @relation(fields: [userId], references: [id], map: "Student_userId_fkey")
  studenthistory studenthistory[]
}

model teacher {
  teacherId Int     @id @default(autoincrement())
  userId    Int     @unique(map: "Teacher_userId_key")
  college   String
  isDeleted Boolean @default(false)
  user      user    @relation(fields: [userId], references: [id], map: "Teacher_userId_fkey")
}

model user {
  id                 Int         @id @default(autoincrement())
  institutionalEmail String      @unique(map: "institutionalEmail") @db.VarChar(255)
  idNumber           String      @unique(map: "User_idNumber_key")
  firstName          String
  lastName           String
  gender             user_gender
  password           String
  image              String?
  dateOfCreation     DateTime    @default(now())
  isDeleted          Boolean     @default(false)
  role               user_role
  counselor          counselor?
  inquiry            inquiry[]
  journal            journal[]
  post               post[]
  referral           referral[]
  student            student?
  teacher            teacher?
  appointmentsAsCounselor appointment[] @relation(name: "AppointmentCounselor")
  appointmentsAsStudent   appointment[] @relation(name: "AppointmentStudent")
}

model appointment {
  appointmentId   Int      @id @default(autoincrement())
  studentId       Int?
  counselorId     Int?
  date            DateTime
  timeStart       String
  timeEnd         String
  additionalNotes String?
  status          Boolean
  appointmentType String
  notes           String?
  purpose         String?
  isDeleted       Boolean  @default(false)
  counselor       user? @relation(name: "AppointmentCounselor", fields: [counselorId], references: [id], map: "Appointment_counselorId_fkey")
  student         user? @relation(name: "AppointmentStudent", fields: [studentId], references: [id], map: "Appointment_studentId_fkey")

}

model event {
  eventId      Int      @id @default(autoincrement())
  eventName    String
  type         String
  location     String
  eventDetails String
  date         DateTime
  timeStart    DateTime
  timeEnd      DateTime
  calendarId   Int
  isDeleted    Boolean  @default(false)

}

model inquiry {
  inquiryId      Int       @id @default(autoincrement())
  sender         Int
  subject        String
  status         String   @default("open")
  date           DateTime
  isDeleted      Boolean   @default(false)
  counselorId    Int?
  counselorReply String?
  message        String
  replyDate      DateTime?
  user           user      @relation(fields: [sender], references: [id], map: "Inquiry_sender_fkey")

  @@index([sender], map: "Inquiry_sender_fkey")
}

model referral {
  referralId      Int     @id @default(autoincrement())
  idNumber        String
  name            String
  referredBy      Int
  reason          String
  additionalNotes String?
  isDeleted       Boolean @default(false)
  user            user    @relation(fields: [referredBy], references: [id], map: "Referral_referredBy_fkey")

  @@index([referredBy], map: "Referral_referredBy_fkey")
}

model studenthistory {
  studentRecordId Int     @id @default(autoincrement())
  name            String
  email           String
  idNumber        String
  program         String
  year            Int
  contactNumber   String
  studentId       Int
  isDeleted       Boolean @default(false)
  student         student @relation(fields: [studentId], references: [studentId], map: "StudentHistory_studentId_fkey")

  @@index([studentId], map: "StudentHistory_studentId_fkey")
}

model post {
  postId           Int       @id @default(autoincrement()) 
  userId           Int
  postContent     String
  publishDate      DateTime? @db.DateTime(0)
  image            String?   @db.VarChar(1024)
  datePosted       DateTime? @default(now()) @db.DateTime(0)
  dateModified     DateTime? @db.DateTime(0)
  isDeleted        Boolean?  @default(false)
  user             user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "post_ibfk_1")

  @@index([userId], map: "Post_userId_idx")
}

model journal {
  journalId   Int      @id @default(autoincrement())
  userId      Int
  title       String
  entry       String
  dateOfEntry DateTime
  isDeleted   Boolean  @default(false)
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "journal_ibfk_1")

  @@index([userId], map: "Journal_userId_idx")
}

enum user_gender {
  male
  female
}

enum user_role {
  counselor
  teacher
  student
}
