// File: app\layout.jsx
```
import Provider from "@/components/Provider";
import FloatingIcon from "@/components/ui/emergency/FloatingIcon";
import "@/styles/globals.css";
import { Inter } from "next/font/google";
import { Toaster } from "react-hot-toast";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
	title: "Well Talk: Communicate",
	description: "This is a pogi app na gawa ng mga imba üòé",
};

export default function RootLayout({ children }) {
	return (
		<html lang="en">
			<body className={inter.className}>
				<Toaster position="top-center" />
				<FloatingIcon />
				<Provider>{children}</Provider>
			</body>
		</html>
	);
}

```

// File: app\not-found.jsx
```
"use client";

import Image from "next/image";
import { useRouter } from "next/navigation";

const NotFoundPage = () => {
  const router = useRouter();
  return (
    <div className="w-full h-screen flex items-center justify-center p-5 flex-col">
      <h1 className="font-extrabold text-7xl">Oops!</h1>
      <p className="font-medium text-2xl mt-2 mb-20">Page not found</p>
      <Image src={"/images/bgs/404.png"} width={800} height={800} />
      <div className="relative m-10 hover:font-bold">
        <button onClick={() => router.push("/login")}>‚¨ÖÔ∏è Go Home</button>
        <span className="absolute h-[1px] w-full bg-black left-0 -bottom-1"></span>
      </div>
    </div>
  );
};

export default NotFoundPage;

```

// File: app\page.jsx
```
"use client";
import Features from "@/components/ui/landing/Features";
import Hero from "@/components/ui/landing/Hero";
import { Navbar } from "@/components/ui/landing/LandingNav";
import { Content } from "@/components/ui/landing/Steps";
import BlogBlock from "@/components/ui/landing/BlogBlock";
import Questions from "@/components/ui/FAQs";
import Footer from "@/components/ui/Footer";
import LandingSlider from "@/components/ui/landing/Slider";


export default function Landing() {
	
	const faqList = [
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
		{
			question: "What Shipping Options do you have?",
			answer: "Partner removes the hassle and confusion that comes from managing your tax burden effectively.",
		},
	];
	return (
		<div className="min-h-screen w-full">
			<main>
				<Navbar userType="landing" />
				<Hero />
				<Features />
				<Content />
				<div className="mb-6">
					<div className="flex flex-col-reverse p-6 md:flex-row container mx-auto items-center">
						<div className="w-full md:w-1/2">
							<div className="p-5">
								<LandingSlider />
							</div>
						</div>
						<div className="w-full md:w-1/2 text-center md:text-right mx-auto mt-8 md:mt-0">
							<div className="mt-8 md:mt-0">
								<h2 className="text-3xl sm:text-5xl lg:text-6xl font-Merriweather">
									Discover Our <br></br>Dedicated<br></br>{" "}
									Counselors
								</h2>
								<p className="mt-4">
									Meet the compassionate individuals who form
									the backbone of<br></br> our counseling
									team. Each counselor brings a wealth of
									expertise<br></br> and empathy, ready to
									guide you through life's challenges with
									<br></br> understanding and support.
								</p>
							</div>
						</div>
					</div>
				</div>
				<BlogBlock />
				<Questions faqList={faqList} />
				<div className="grid grid-cols-12 mt-6">
					<div className="col-span-12 text-center">
						<div
							className="rounded-xl text-white p-8 mx-8 md:py-6 lg:py-12"
							style={{ backgroundColor: "#1F2724" }}>
							<h4 className="font-Merriweather text-gray-50 text-2xl md:text-3xl font-semibold sm:text-4xl">
								Have any additional questions?
							</h4>
							<p className="font-Jaldi text-gray-50 mt-4">
								Lorem, ipsum dolor sit amet consectetur
								adipisicing elit. Aut, odio fuga!
							</p>
							<button
								className="hover:bg-opacity-90 text-white font-bold border border-gray-50 py-3 px-6 rounded-full transition mt-4 mb-0"
								style={{ backgroundColor: "#6B9080" }}>
								Get in touch
							</button>
						</div>
					</div>
				</div>
				<Footer />
			</main>
		</div>
	);
}
```

// File: app\admin\page.jsx
```
"use client";

import { useState } from "react";

import SideNav from "@/components/admin_components/SideNav";
import Box from "@mui/material/Box";
import { DrawerHeader } from "@/components/admin_components/SideNav";
import Dashboard from "@/components/admin_components/pages/Dashboard";
import Referrals from "@/components/admin_components/pages/Referrals";
import Users from "@/components/admin_components/pages/Users";
import Appointments from "@/components/admin_components/pages/Appointments";
import Load from "@/components/Load";
import Cookies from "js-cookie";
import { getUserSession } from "@/lib/helperFunctions";

const AdminDashboard = () => {
  const userSession = getUserSession();
  const [page, setPage] = useState("Dashboard");

  if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
    return <Load route="login" />;
  }

  if (userSession && userSession.role !== "admin")
    return <Load route={userSession.role} />;

  return (
    <div className="w-full min-h-screen flex bg-white">
      <SideNav setPage={setPage} />
      <Box
        component="main"
        sx={{ flexGrow: 1, p: 3, backgroundColor: "white" }}
      >
        <DrawerHeader />
        {page === "Dashboard" && <Dashboard userSession={userSession} />}
        {page === "Appointments" && <Appointments />}
        {page === "Users" && <Users />}
        {page === "Referrals" && <Referrals />}
      </Box>
    </div>
  );
};

export default AdminDashboard;

```

// File: app\counselor\page.jsx
```
"use client";
import { default as Load, default as LoadingState } from "@/components/Load";
import Card from "@/components/ui/Card";
import CreatePostSection from "@/components/ui/CreatePost";
import Footer from "@/components/ui/Footer";
import { Navbar } from "@/components/ui/Navbar";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { API_ENDPOINT } from "@/lib/api";
import FloatingIcon from "@/components/ui/emergency/FloatingIcon";
import dynamic from "next/dynamic";

const Home = () => {
	const [selectedButton, setSelectedButton] = useState("featured");
	const [posts, setPosts] = useState([]);
	const [showFilterPostModal, setShowFilterModal] = useState(false);
	const [sortPostBy, setSortPostBy] = useState("Latest");
	const [loading, setLoading] = useState(true);
	const userSession = getUserSession();
	const router = useRouter();


	/* Handling unauthenticated users */
	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession && userSession.role !== "counselor") {
		return <Load route={userSession.role} />;
	}

	const fetchPosts = async () => {
		try {
			const response = await fetch(`${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_POSTS}`, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${Cookies.get("token")}`,
				},
			});
			if (!response.ok) {
				throw new Error("Failed to fetch posts");
			}
			const data = await response.json();
			setPosts(data);
			setLoading(false);
		} catch (error) {
			console.error("Error fetching posts:", error);
			setLoading(false);
		}
	};

	useEffect(() => {
		fetchPosts();
	}, []);

	// if (status === "loading" || !session) {
	// 	return <Loading />;
	// }

	// Redirect authenticated users who are not students
	// if (session.user.role !== "student") {
	// 	router.push("/login");
	// 	return null; // Prevent rendering anything if redirecting
	// }

	// const getSortedPosts = () => {
	//   if (!Array.isArray(posts)) {
	//     return [];
	//   }

	//   return [...posts].sort((a, b) => {
	//     // Combine date and time into a full ISO 8601 timestamp string
	//     const dateTimeA = new Date(`${a.postDate}T${a.postTime}`);
	//     const dateTimeB = new Date(`${b.postDate}T${b.postTime}`);

	//     if (sortPostBy === "Latest") {
	//       // Sort by latest date and time first
	//       return dateTimeB - dateTimeA;
	//     } else if (sortPostBy === "Oldest") {
	//       // Sort by oldest date and time first
	//       return dateTimeA - dateTimeB;
	//     } else {
	//       // If no sort order is specified, return the posts unsorted
	//       return posts;
	//     }
	//   });
	// };

	// const sortedPosts = getSortedPosts();

	return (
		<div>
			<main className="min-h-screen">
				<Navbar userType="counselor" />
				<div
					className="pattern-overlay pattern-left absolute -z-10"
					style={{ transform: "scaleY(-1)", top: "-50px" }}
				>
					<img src="/images/landing/lleft.png" alt="pattern" />
				</div>
				<div
					className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
					style={{ transform: "scaleY(-1)", top: "-15px" }}
				>
					<img
						src="/images/landing/lright.png"
						alt="pattern"
						className="w-full h-full object-contain"
					/>
				</div>
				{/*Posts*/}
				<div className="flex flex-col md:flex-row py-24 px-4 md:px-12">
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 w-full md:w-11/12 flex flex-col">
						<div className="max-w-8xl mx-auto px-5 flex flex-col w-full">
							<div className="flex flex-col  flex-grow items-start my-6">
								<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
									{sortPostBy} Posts
								</h1>
								<p className="font-Jaldi text-xl sm:text-base">
									Check out the latest posts from the university's Guidance
									Counselor!
								</p>
							</div>
							{/* <div className="ml-auto relative">
								<GiSettingsKnobs
									className="fill-black stroke-0 hover:stroke-2 text-2xl cursor-pointer text-center"
									onClick={() =>
										setShowFilterModal((prev) => !prev)
									}
								/>
								{showFilterPostModal && (
									<div className="absolute w-30 h-22 px-1 shadow-xl bg-slate-100 border border-slate-300 text-slate-600 font-semibold right-0 top-7 z-20 rounded-xl">
										<ul className="p-2 cursor-pointer text-start">
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Latest");
													setShowFilterModal(false);
												}}>
												Latest
											</li>
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Oldest");
													setShowFilterModal(false);
												}}>
												Oldest
											</li>
										</ul>
									</div>
								)}
							</div> */}
						</div>
						<div className="w-full p-2 mx-auto flex-grow max-h-[90vh] overflow-y-auto">
							{loading ? (
								<LoadingState />
							) : (
								<CreatePostSection userSession={userSession} />
							)}
						</div>
					</div>
					{/*Blogs*/}
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 flex-grow-2 w-full">
						<div className="flex flex-col px-4 flex-grow-1 items-start my-6">
							<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
								Editor's Picks
							</h1>
							<p className="font-Jaldi text-xl sm:text-base">
								Check out the latest posts from the university's Guidance Counselor!
							</p>
						</div>

						<div className="w-full mx-auto flex-grow max-h-[90vh] overflow-y-auto">
							<Card />
						</div>
					</div>
				</div>
				<Footer />
				<FloatingIcon />
			</main>
		</div>
	);
};

export default dynamic(() => Promise.resolve(Home), { ssr: false });

// "use client";

// import React, { useEffect, useState } from 'react';
// import { FaGraduationCap, FaBriefcase, FaUser } from 'react-icons/fa';
// import AppointmentTable from '@/components/ui/counselor/dashboard/AppointmentTable';
// import ReferralTable from '@/components/ui/counselor/dashboard/ReferralTable';
// import InquiryTable from '@/components/ui/counselor/dashboard/InquiryTable';

// const Dashboard = () => {
//   const [data, setData] = useState({
//     students: 0,
//     teachers: 0,
//     counselors: 0,
//     appointments: [],
//     referrals: [],
//     inquiries: [],
//   });
//   const [currentPageInquiries, setCurrentPageInquiries] = useState(1);
//   const [currentPageReferrals, setCurrentPageReferrals] = useState(1);
//   const inquiriesPerPage = 5;
//   const referralsPerPage = 5;

//   useEffect(() => {
//     // Fetch data from your API or database
//     // Example:
//     // fetchData().then(response => setData(response));

//     // Placeholder data
//     setData({
//       students: 11985,
//       teachers: 234,
//       counselors: 56,
//       appointments: [
//         { id: 1, student: { firstName: 'Olivia', lastName: 'Rhye', idNumber: 'S001', institutionalEmail: 'olivia@untitledui.com', image: 'https://via.placeholder.com/30' }, dateTime: '2024-05-20 10:00 - 11:00', purpose: 'Headache', status: true },
//         { id: 2, student: { firstName: 'Phoenix', lastName: 'Baker', idNumber: 'S002', institutionalEmail: 'phoenix@untitledui.com', image: 'https://via.placeholder.com/30' }, dateTime: '2024-05-20 11:00 - 12:00', purpose: 'Bully', status: false },
//         { id: 3, student: { firstName: 'Lana', lastName: 'Steiner', idNumber: 'S003', institutionalEmail: 'lana@untitledui.com', image: 'https://via.placeholder.com/30' }, dateTime: '2024-05-20 12:00 - 13:00', purpose: 'Mommy issues', status: null },
//         { id: 4, student: { firstName: 'Demi', lastName: 'Wilkinson', idNumber: 'S004', institutionalEmail: 'demi@untitledui.com', image: 'https://via.placeholder.com/30' }, dateTime: '2024-05-20 13:00 - 14:00', purpose: 'Daddy issues', status: null },
//       ],
//       referrals: [
//         { id: 1, student: { firstName: 'Olivia', lastName: 'Rhye', institutionalEmail: 'olivia@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 10:00 - 11:00', reason: 'Schizophrenia' },
//         { id: 2, student: { firstName: 'Phoenix', lastName: 'Baker', institutionalEmail: 'pnix@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 11:00 - 12:00', reason: 'Bipolarity' },
//         { id: 3, student: { firstName: 'Lana', lastName: 'Steiner', institutionalEmail: 'lana@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 12:00 - 13:00', reason: 'Multiple Personality' },
//         { id: 4, student: { firstName: 'Demi', lastName: 'Wilkinson', institutionalEmail: 'demi@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 13:00 - 14:00', reason: 'Parkinson‚Äôs' },
//         { id: 5, student: { firstName: 'Candice', lastName: 'Wu', institutionalEmail: 'candix@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 14:00 - 15:00', reason: 'Homosexuality' },
//       ],
//       inquiries: [
//         { id: 1, student: { firstName: 'Olivia', lastName: 'Rhye', institutionalEmail: 'olivia@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 10:00 - 11:00', subject: 'Career Counseling', status: 'open' },
//         { id: 2, student: { firstName: 'Phoenix', lastName: 'Baker', institutionalEmail: 'pnix@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 11:00 - 12:00', subject: 'I am dying', status: 'closed' },
//         { id: 3, student: { firstName: 'Lana', lastName: 'Steiner', institutionalEmail: 'lana@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 12:00 - 13:00', subject: 'Please help me', status: 'open' },
//         { id: 4, student: { firstName: 'Demi', lastName: 'Wilkinson', institutionalEmail: 'demi@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 13:00 - 14:00', subject: 'Handling Emotions', status: 'closed' },
//         { id: 5, student: { firstName: 'Candice', lastName: 'Wu', institutionalEmail: 'candix@untitledui.com', image: 'https://via.placeholder.com/30' }, date: '2024-05-20 14:00 - 15:00', subject: 'Ariana Grande', status: 'open' },
//       ],
//     });
//   }, []);

//   const handleRowClick = (inquiryId) => {
//     console.log(`Inquiry ID clicked: ${inquiryId}`);
//   };

//   const showDeleteModal = (inquiryId) => {
//     console.log(`Delete modal for Inquiry ID: ${inquiryId}`);
//   };

//   const currentInquiries = data.inquiries.slice((currentPageInquiries - 1) * inquiriesPerPage, currentPageInquiries * inquiriesPerPage);
//   const currentReferrals = data.referrals.slice((currentPageReferrals - 1) * referralsPerPage, currentPageReferrals * referralsPerPage);

//   return (
//     <div className="p-6 flex flex-row space-y-6 min-h-screen w-full">
//       <div className="flex flex-col gap-6">
//         <div className="bg-white p-6 rounded-lg shadow-md text-center flex flex-col items-center">
//           <p className="text-3xl font-semibold">{data.students}</p>
//           <div className="flex items-center text-gray-600 mt-2">
//             <FaGraduationCap className="mr-2 text-green-600" />
//             <p>Students</p>
//           </div>
//         </div>
//         <div className="bg-white p-6 rounded-lg shadow-md text-center flex flex-col items-center">
//           <p className="text-3xl font-semibold">{data.teachers}</p>
//           <div className="flex items-center text-gray-600 mt-2">
//             <FaBriefcase className="mr-2 text-green-600" />
//             <p>Teachers</p>
//           </div>
//         </div>
//         <div className="bg-white p-6 rounded-lg shadow-md text-center flex flex-col items-center">
//           <p className="text-3xl font-semibold">{data.counselors}</p>
//           <div className="flex items-center text-gray-600 mt-2">
//             <FaUser className="mr-2 text-green-600" />
//             <p>Counselors</p>
//           </div>
//         </div>
//       </div>
//       <div className="flex flex-col">
//             {/* Appointment Table */}
//             <AppointmentTable
//         data={data}
//         // Pass other necessary props
//       />
//       <div className="flex flex-row gap-6">
//       {/* Referral Table */}
//       <ReferralTable
//         data={data}
//         currentReferrals={currentReferrals}
//         // Pass other necessary props
//       />

//       {/* Inquiry Table */}
//       <InquiryTable
//         data={data}
//         currentPageInquiries={currentPageInquiries}
//         setCurrentPageInquiries={setCurrentPageInquiries}
//         inquiriesPerPage={inquiriesPerPage}
//         currentReferrals={currentReferrals}
//         setCurrentPageReferrals={setCurrentPageReferrals}
//         referralsPerPage={referralsPerPage}
//         handleRowClick={handleRowClick}
//         showDeleteModal={showDeleteModal}
//         // Pass other necessary props
//       />
//       </div>
//       </div>
//     </div>
//   );
// };

// export default Dashboard;

```

// File: app\counselor\appointment-OLD\page.jsx
```
"use client";

import hdrAppointment from "@/public/images/headers/hdrAppointment.png";
import { useEffect, useState } from "react";

// css
import "@/styles/counselor.css";

// modals
import { Navbar } from "@/components/ui/Navbar";
import ModalAppointmentInfo from "@/components/ui/modals/counselor/appointments/ModalAppointmentInfo";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";

import Cookies from "js-cookie";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";

export default function Appointment() {
  const userSession = getUserSession();
  const AppointmentPerPage = 10;

  const [selectedID, setSelectedID] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);

  //modals
  const [deleteModal, setDeleteModal] = useState(false);
  const [appointmentModal, setAppointmentModal] = useState(null);

  // table state (pending appointments || my appointments)

  const [appointments, setAppointments] = useState([]);

  useEffect(() => {
    try {
      fetchAppointments();
    } catch (error) {
      console.log(error);
    }
  }, []);

  const fetchAppointments = async () => {
    const response = await fetch(
      `${process.env.BASE_URL}${API_ENDPOINT.STUDENT_GET_ALL_APPOINTMENTS}`,
      {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      }
    );
    const data = await response.json();
    const filteredData = data.filter(
      (appointment) =>
        appointment.appointmentStatus === "Assigned" &&
        appointment.counselor.id === userSession.id
    );

    console.log(filteredData);
    setAppointments(filteredData);
  };

  const formatDate = (date) => {
    const dateObject = new Date(date);
    const options = { year: "numeric", month: "long", day: "numeric" };
    const finalDate = dateObject.toLocaleDateString("en-US", options);

    return finalDate;
  };

  const handleRowClick = (id) => {
    setSelectedID(id);
    setAppointmentModal(true);
  };

  const showDeleteModal = (id) => {
    setSelectedID(id);
    setDeleteModal(true);
  };

  const handleDelete = async () => {
    // Find
    const selected = appointments.find(
      (appointment) => appointment.appointmentId === selectedID
    );

    console.log("Selected ID: ", selectedID);
    console.log("Selected data: ", selected);

    try {
      const deleted = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.DELETE_APPOINTMENT}${selectedID}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );

      if (deleted.ok) {
        setDeleteModal(false);
        setSelectedID(null);
        fetchAppointments();
      }
    } catch (err) {
      console.log(err);
    }
  };

  // handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
  // const handleReschedule = () => {
  // 	// Find
  // 	const selected = appointments.find(
  // 		(appointment) => appointment.id === selectedID
  // 	);

  // Calculate the index range of appointment to display for the current page

  // THIS DUPLICATE IS FOR MY APPOINTMENTS TABLE
  const indexOfLastInquiry1 = currentPage * AppointmentPerPage;
  const indexOfFirstInquiry1 = indexOfLastInquiry1 - AppointmentPerPage;
  const currentAppointments1 = appointments?.slice(
    indexOfFirstInquiry1,
    indexOfLastInquiry1
  );

  return (
    <div className="min-h-screen w-full">
      {/* navigation bar */}
      <Navbar userType="counselor" />

      {/* header */}
      <div className="w-full h-[55vh] relative">
        {/* Background image */}
        <div
          className="absolute inset-0 bg-cover bg-center opacity-40"
          style={{
            backgroundImage: `url(${hdrAppointment.src})`,
          }}
        ></div>

        {/* Content */}
        <div className="relative z-10 flex items-center justify-center h-full">
          <div className="flex flex-col text-left px-44 py-10 gap-y-4">
            <h1 className="font-Merriweather text-8xl">Appointments</h1>
            <p className="w-1/2 font-Jaldi text-xl">
              Manage sessions effortlessly and provide tailored guidance and
              support to students through efficient booking and coordination.
              Streamline your scheduling process and ensure students receive
              personalized attention.
            </p>
          </div>
        </div>
      </div>

      <div className="flex flex-col text-center gap-4 pb-4">
        <h3 className="flex items-center justify-center gap-8 mt-10 text-green-600 font-semibold text-lg">
          üìí My Appointments
        </h3>
        {/* table*/}

        <div className="overflow-x-auto max-w-full lg:px-10 xs:px-1">
          <table className="table bg-gray-100">
            {/* head */}
            <thead>
              <tr className="bg-gray-200 font-bold">
                <th className="text-center p-5">ID</th>
                <th>Date and Time</th>
                <th className="p-5">ID Number</th>
                <th>Student</th>
                <th className="">Reason</th>
                <th className="text-center">Status</th>
                {/* Delete and Edit*/}
                <th className="no-hover-highlight"></th>
              </tr>
            </thead>
            <tbody>
              {currentAppointments1?.map((appointments) => (
                <tr
                  key={appointments.appointmentId}
                  onClick={() => handleRowClick(appointments.appointmentId)}
                  className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
                >
                  <td className="text-center">{appointments.appointmentId}</td>
                  <td>
                    <div className="flex flex-row gap-x-3">
                      <div className="text-sm">
                        {formatDate(appointments.appointmentDate)}{" "}
                        {appointments.appointmentStartTime}
                      </div>
                    </div>
                  </td>
                  <td>
                    <div className="flex flex-row gap-x-3">
                      <div>{appointments.student?.idNumber}</div>
                    </div>
                  </td>
                  <td>
                    <div className="flex items-center gap-3">
                      <div className="avatar">
                        <div className="mask mask-squircle w-12 h-12">
                          <img
                            src={appointments.student?.image}
                            alt="Avatar Tailwind CSS Component"
                          />
                        </div>
                      </div>
                      <div>
                        <div className="font-bold">
                          {appointments.student?.firstName}{" "}
                          {appointments.student?.lastName}
                        </div>
                        <div className="text-sm opacity-50">
                          {appointments.student?.institutionalEmail}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p>
                      {appointments.appointmentPurpose.length > 50
                        ? `${appointments.appointmentPurpose.substring(
                            0,
                            40
                          )}...`
                        : appointments.appointmentPurpose}
                    </p>
                  </td>
                  <td className="text-center">
                    <div className={`w-24 h-5 badge badge-xs badge-success`}>
                      {appointments.appointmentStatus}
                    </div>
                  </td>

                  {/* Delete and Edit */}
                  <td>
                    <div className="flex lg:flex-row justify-center items-center lg:gap-x-5 xs:gap-2 xs:flex-col">
                      <button
                        className="btn btn-xs"
                        onClick={(e) => {
                          // Stop event propagation to prevent row hover effect
                          e.stopPropagation();
                          showDeleteModal(appointments.appointmentId);
                        }}
                      >
                        Delete
                      </button>
                      <button className="btn btn-xs text-green-700">
                        Edit
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination controls */}
          <div className="join pt-5">
            <button
              onClick={() => setCurrentPage(currentPage - 1)}
              disabled={currentPage === 1}
              className="join-item btn w-28"
            >
              Previous
            </button>

            {appointments &&
              [
                ...Array(Math.ceil(appointments.length / AppointmentPerPage)),
              ].map((_, index) => (
                <button
                  key={index}
                  className={`join-item btn ${
                    currentPage === index + 1 ? "btn-active" : ""
                  }`}
                  onClick={() => setCurrentPage(index + 1)}
                >
                  {index + 1}
                </button>
              ))}

            <button
              onClick={() => setCurrentPage(currentPage + 1)}
              disabled={AppointmentPerPage > appointments?.length}
              className="join-item btn w-28"
            >
              Next
            </button>
          </div>
        </div>
      </div>

      {/* modals */}
      {deleteModal && (
        <ModalDelete
          setDeleteModal={setDeleteModal}
          handleDelete={handleDelete}
        ></ModalDelete>
      )}

      {appointmentModal && (
        <ModalAppointmentInfo
          setAppointmentModal={setAppointmentModal}
          selectedID={selectedID}
          appointments={appointments}
          setAppointments={setAppointments}
          fetchAppointments={fetchAppointments}
          // TO BE ADDED
          // handleRescedule={handleReschedule}
          // handleUpdateStatus={handleUpdateStatus}
        ></ModalAppointmentInfo>
      )}
    </div>
  );
}

```

// File: app\counselor\calendar\page.jsx
```
"use client";

import { Navbar } from "@/components/ui/Navbar";
import CalendarScheduling from "@/components/ui/calendar/CalendarScheduling";
import Events from "@/components/ui/calendar/Events";
import ViewEvents from "@/components/ui/calendar/ViewEvents";
import GlobalContext from "@/context/GlobalContext";
import { useContext } from "react";

export default function CalendarView() {
	const { showEventModal, viewEvents } = useContext(GlobalContext);

	const events = [
		{
			id: 1,
			tag: "Event",
			date: "2024-05-04",
			time: "10:00 AM",
			user: {
				idNumber: "2024-0001",
				firstName: "John",
				lastName: "Doe",
				institutionalEmail: "jdoe@gmail.com",
				image: "/path/to/image.jpg",
			},
			name: "PA-MIST-TEH: Sale on Mists and Teas",
			type: "Event 1 Type",
			location: "Location 1",
			additional_notes:
				"This event is a sale on mists and teas. Get your mists and teas here! Enjoy up to 50% off on selected items that is curated by the people behind always sunny in philadelphia, pamistteh!",
			status: "Upcoming",
		},
		{
			id: 2,
			tag: "Event",
			date: "2024-05-04",
			time: "10:00 AM",
			user: {
				idNumber: "2024-0001",
				firstName: "John",
				lastName: "Doe",
				institutionalEmail: "jdoe@gmail.com",
				image: "/path/to/image.jpg",
			},
			name: "BALIKWAS: Refusing to be Silenced",
			type: "Event 1 Type",
			location: "Location 1",
			additional_notes:
				"BALIKWAS is a webinar held by the Institute of Balikwas University to mitigate the risks of Baliwasing the demons by Doja Cat.",
			status: "Upcoming",
		},
		{
			id: 3,
			tag: "Event",
			date: "2024-05-04",
			time: "10:00 AM",
			user: {
				idNumber: "2024-0001",
				firstName: "John",
				lastName: "Doe",
				institutionalEmail: "jdoe@gmail.com",
				image: "/path/to/image.jpg",
			},
			name: "GI-ATAY: Liver and Kidney Failure Awareness Campaign",
			type: "Event 1 Type",
			location: "Location 1",
			additional_notes:
				"GI-ATAY, which is a pretty vulgar word, actually aims to educate young people on the importance of their liver health. Expresso martini on a Tuesday night? Well Goddamn, you're gonna need this event.",
			status: "Upcoming",
		},
		{
			id: 4,
			tag: "Event",
			date: "2024-05-04",
			time: "10:00 AM",
			user: {
				idNumber: "2024-0001",
				firstName: "John",
				lastName: "Doe",
				institutionalEmail: "jdoe@gmail.com",
				image: "/path/to/image.jpg",
			},
			name: "BRO-ANGG: The Adventures of Angg and His BROS",
			type: "Event 1 Type",
			location: "Location 1",
			additional_notes:
				"Bro-Angg is wordplay on a classic Bisaya curse word Boang, which means crazy. I'm not crazy, maybe Angg is. Is Angg crazy?",
			status: "Upcoming",
		},
	];

	return (
		<div className="h-screen flex flex-row">
			<Navbar userType="counselor" />

			<section className="bg-gray-200 h-[90vh] w-full flex flex-row mt-20 p-6">
				<CalendarScheduling />
				<Events events={events} />
			</section>

			{viewEvents && <ViewEvents />}
		</div>
	);
}

```

// File: app\counselor\counselor-appointment\page.jsx
```
"use client";

import FullButton from "@/components/ui/buttons/FullButton";
import TextAreaInput from "@/components/ui/inputs/TextAreaInput";
import TextInput from "@/components/ui/inputs/TextInput";
import StudentAddAppointment from "@/components/ui/modals/counselor/appointments/StudentAddAppointment";
import hdrAppointment from "@/public/images/headers/hdrAppointment.png";
import { useEffect, useState } from "react";
// css
import "@/styles/counselor.css";

// modals
import { Navbar } from "@/components/ui/Navbar";
import AddStudent from "@/components/ui/modals/counselor/appointments/AddStudent";
import ModalAppointmentInfo from "@/components/ui/modals/counselor/appointments/ModalAppointmentInfo";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";

import Load from "@/components/Load";
import Loading from "@/components/Loading";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import dynamic from "next/dynamic";
import toast from "react-hot-toast";
import { Badge, Calendar, Popover, Whisper } from "rsuite";
import "rsuite/dist/rsuite.min.css";

const Appointment = () => {
  const AppointmentPerPage = 10;

  const [selectedID, setSelectedID] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);

  //modals
  const [deleteModal, setDeleteModal] = useState(false);
  const [appointmentModal, setAppointmentModal] = useState(null);

  const [isAddAppointment, setIsAddAppointment] = useState(true);
  const [isViewAppointment, setIsViewAppointment] = useState(false);

  const [appointments, setAppointments] = useState([]);
  const [students, setStudents] = useState([{}]);
  const [selectedStudentId, setSelectedStudentId] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [openAddStudent, setOpenAddStudent] = useState(false);

  const userSession = getUserSession();

  const [appointmentDate, setAppointmentDate] = useState(
    new Date().toISOString().split("T")[0]
  );
  const [selectedTime, setSelectedTime] = useState(""); // State to store the selected time
  const [endTime, setEndTime] = useState(""); // State to store the end time
  const [appointmentType, setAppointmentType] = useState(""); // State to store the selected appointment type
  const [purpose, setPurpose] = useState(""); // State to store the purpose of the appointment
  const [appointmentOnThatDate, setAppointmentOnThatDate] = useState([]);

  if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
    return <Load route="login" />;
  }

  if (userSession.role !== "counselor") {
    return <Load role={userSession.role} />;
  }

  useEffect(() => {
    if (userSession) {
      try {
        fetchAppointments();
        fetchStudents();
      } catch (error) {
        console.log(error);
      }
    }
  }, []);

  const fetchAppointments = async () => {
    const response = await fetch(
      `${process.env.BASE_URL}${API_ENDPOINT.STUDENT_GET_ALL_APPOINTMENTS}`,
      {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      }
    );

    if (!response.ok) {
      console.error("Error fetching appointments");
    }
    const data = await response.json();

    const filteredData = data.filter(
      (appointment) =>
        appointment?.counselor?.id === userSession?.id &&
        appointment.appointmentStatus === "Assigned"
    );
    console.log("Appointments: ", filteredData);
    setAppointments(filteredData);
  };

  const fetchStudents = async () => {
    const response = await fetch(
      `${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_STUDENTS}`,
      {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      }
    );

    if (!response.ok) {
      console.error("Error fetching students");
    }
    const data = await response.json();
    setStudents(data);
  };

  useEffect(() => {
    fetchAppointmentsOnThatDate();
  }, [appointmentDate]);

  const fetchAppointmentsOnThatDate = async () => {
    const response = await fetch(
      `${process.env.BASE_URL}${API_ENDPOINT.GET_APPOINTMENT_BY_DATE}${appointmentDate}`,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      }
    );
    const data = await response.json();
    setAppointmentOnThatDate(data);
  };

  const formatDate = (date) => {
    const dateObject = new Date(date);
    const options = { year: "numeric", month: "long", day: "numeric" };
    const finalDate = dateObject.toLocaleDateString("en-US", options);

    return finalDate;
  };

  const handleRowClick = (id) => {
    setSelectedID(id);
    setAppointmentModal(true);
  };

  const showDeleteModal = (id) => {
    setSelectedID(id);
    setDeleteModal(true);
  };

  const handleDelete = async () => {
    // Find
    const selected = appointments.find(
      (appointment) => appointment.appointmentId === selectedID
    );

    // CORS ISSUE - TO BE FIXED
    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.DELETE_APPOINTMENT}${selectedID}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      if (!response.ok) {
        throw new Error("Failed to delete appointment");
      } else {
        toast.success("Appointment deleted successfully");
        fetchAppointments();
        setDeleteModal(false);
        setSelectedID(null);
      }
    } catch (err) {
      console.log(err);
    }
  };

  const filteredStudents = students.filter((user) =>
    user?.firstName?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
  // const handleReschedule = () => {
  // 	// Find
  // 	const selected = appointments.find(
  // 		(appointment) => appointment.id === selectedID
  // 	);

  // Calculate the index range of appointment to display for the current page
  const indexOfLastInquiry = currentPage * AppointmentPerPage;
  const indexOfFirstInquiry = indexOfLastInquiry - AppointmentPerPage;
  const currentAppointments = appointments?.slice(
    indexOfFirstInquiry,
    indexOfLastInquiry
  );

  const handleAddAppointmentClick = () => {
    setIsAddAppointment(true);
    setIsViewAppointment(false);
  };

  const handleViewAppointmentClick = () => {
    setIsAddAppointment(false);
    setIsViewAppointment(true);
  };

  const timeSlots = [
    "08:00",
    "09:00",
    "10:00",
    "11:00",
    "12:00",
    "1:00",
    "2:00",
    "3:00",
    "4:00",
  ];

  // Helper function to check if a time slot is taken
  const isTimeSlotTaken = (time) => {
    return appointmentOnThatDate.some(
      (appointment) => appointment.appointmentStartTime === time
    );
  };

  const addTime = (startTime, duration) => {
    // Split the start time and duration into hours and minutes
    let [startHours, startMinutes] = startTime.split(":").map(Number);
    let [durationHours, durationMinutes] = duration.split(":").map(Number);

    // Convert start time to 24-hour format if it's PM
    if (startHours < 12 && startTime.includes("PM")) {
      startHours += 12;
    }

    // Add the duration to the start time
    let endHours = startHours + durationHours;
    let endMinutes = startMinutes + durationMinutes;

    // Adjust minutes and hours if minutes exceed 60
    if (endMinutes >= 60) {
      endHours += Math.floor(endMinutes / 60);
      endMinutes %= 60;
    }

    // Convert back to 12-hour format if needed
    let endPeriod = "AM";
    if (endHours >= 12) {
      endPeriod = "PM";
      if (endHours > 12) {
        endHours -= 12;
      }
    }

    // Format the end time back to a string
    endHours = endHours.toString().padStart(2, "0");
    endMinutes = endMinutes.toString().padStart(2, "0");

    return `${endHours}:${endMinutes} ${endPeriod}`;
  };

  const handleTimeSlotClick = (time) => {
    if (!isTimeSlotTaken(time)) {
      setSelectedTime(time); // Update the selected time
      const duration = "1:00"; // Duration to add
      setEndTime(addTime(selectedTime, duration));
    }
  };

  const handleAppointmentSubmit = async () => {
    const confirmed = window.confirm(
      "Are you sure you want to add this appointment?"
    );
    if (!confirmed) {
      return; // Don't proceed if the user cancels
    }
    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.STUDENT_CREATE_APPOINTMENT}${selectedStudentId}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
          body: JSON.stringify({
            appointmentDate: appointmentDate,
            appointmentStartTime: selectedTime,
            appointmentType: appointmentType,
            appointmentPurpose: purpose,
          }),
        }
      );

      if (response.ok) {
        toast.success("Appointment set successfully");
      }

      setPurpose("");
      setAppointmentType("");
      fetchAppointments();
      fetchAppointmentsOnThatDate();
      setIsAddAppointment(false);
      setIsViewAppointment(true);
    } catch (error) {
      toast.error("Failed to set appointment");
    }
  };

  const formatDateCalendar = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  return (
    <div className="min-h-screen w-full">
      {/* navigation bar */}
      <Navbar userType="counselor" />

      {/* header */}
      <div className="w-full h-[45vh] md:h-[55vh] relative">
        {/* Background image */}
        <div
          className="absolute inset-0 bg-cover bg-center opacity-40"
          style={{
            backgroundImage: `url(${hdrAppointment.src})`,
          }}
        ></div>

        {/* Content */}
        <div className="relative z-10 flex items-center justify-center h-full">
          <div className="flex flex-col text-left px-6 md:px-20 lg:px-44 py-10 gap-y-4">
            <h1 className="font-Merriweather text-4xl md:text-6xl lg:text-8xl">
              Appointments
            </h1>
            <p className="w-full md:w-3/4 lg:w-1/2 font-Jaldi text-lg md:text-xl">
              Manage sessions effortlessly and provide tailored guidance and
              support to students through efficient booking and coordination.
              Streamline your scheduling process and ensure students receive
              personalized attention.
            </p>
          </div>
        </div>
      </div>

      {userSession ? (
        <div>
          <div className="w-full mt-8 flex items-center gap-3 justify-center">
            <button
              className={`font-medium px-4 py-2 rounded-full transition-colors duration-200 ${
                isAddAppointment
                  ? "bg-primary-green text-white"
                  : "border border-primary-green text-primary-green"
              }`}
              onClick={handleAddAppointmentClick}
            >
              Set Appointment
            </button>
            <button
              className={`font-medium px-4 py-2 rounded-full transition-colors duration-200 ${
                isViewAppointment
                  ? "bg-primary-green text-white"
                  : "border border-primary-green text-primary-green"
              }`}
              onClick={handleViewAppointmentClick}
            >
              View Appointments
            </button>
          </div>
          {appointments && isViewAppointment ? (
            <div className="overflow-x-auto max-w-full lg:px-10 xs:px-1 flex flex-col items-center mt-10">
              <table className="table bg-gray-100">
                {/* head */}
                <thead>
                  <tr className="bg-gray-200 font-bold">
                    <th className="text-center p-5">ID</th>
                    <th>Date and Time</th>
                    <th className="p-5">ID Number</th>
                    <th>Student</th>
                    <th className="">Reason</th>
                    <th className="text-center">Status</th>
                    {/* Delete and Edit*/}
                    <th className="no-hover-highlight"></th>
                  </tr>
                </thead>
                <tbody>
                  {currentAppointments?.map((appointments) => (
                    <tr
                      key={appointments.appointmentId}
                      onClick={() => handleRowClick(appointments.appointmentId)}
                      className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
                    >
                      <td className="text-center">
                        {appointments.appointmentId}
                      </td>
                      <td>
                        <div className="flex flex-row gap-x-3">
                          <div className="text-sm">
                            {formatDate(appointments.appointmentDate)}{" "}
                            {appointments.appointmentStartTime}
                          </div>
                        </div>
                      </td>
                      <td>
                        <div className="flex flex-row gap-x-3">
                          <div>{appointments.student?.idNumber}</div>
                        </div>
                      </td>
                      <td>
                        <div className="flex items-center gap-3">
                          <div className="avatar">
                            <div className="mask mask-squircle w-12 h-12">
                              <img
                                src={appointments.student?.image}
                                alt="Avatar Tailwind CSS Component"
                              />
                            </div>
                          </div>
                          <div>
                            <div className="font-bold">
                              {appointments.student?.firstName}{" "}
                              {appointments.student?.lastName}
                            </div>
                            <div className="text-sm opacity-50">
                              {appointments.student?.institutionalEmail}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td>
                        <p>
                          {appointments?.appointmentPurpose?.length > 50
                            ? `${appointments?.appointmentPurpose?.substring(
                                0,
                                40
                              )}...`
                            : appointments?.appointmentPurpose}
                        </p>
                      </td>
                      <td className="text-center">
                        <div
                          className={`w-24 h-5 badge badge-xs badge-success`}
                        >
                          {appointments.appointmentStatus}
                        </div>
                      </td>

                      {/* Delete and Edit */}
                      <td>
                        <div className="flex lg:flex-row justify-center items-center lg:gap-x-5 xs:gap-2 xs:flex-col">
                          <button
                            className="btn btn-xs"
                            onClick={(e) => {
                              // Stop event propagation to prevent row hover effect
                              e.stopPropagation();
                              showDeleteModal(appointments.appointmentId);
                            }}
                          >
                            Delete
                          </button>
                          <button className="btn btn-xs text-green-700">
                            Edit
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              {/* Pagination controls */}
              <div className="join pt-5">
                <button
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="join-item btn w-28"
                >
                  Previous
                </button>

                {appointments &&
                  [
                    ...Array(
                      Math.ceil(appointments.length / AppointmentPerPage)
                    ),
                  ].map((_, index) => (
                    <button
                      key={index}
                      className={`join-item btn ${
                        currentPage === index + 1 ? "btn-active" : ""
                      }`}
                      onClick={() => setCurrentPage(index + 1)}
                    >
                      {index + 1}
                    </button>
                  ))}

                <button
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={AppointmentPerPage > appointments?.length}
                  className="join-item btn w-28"
                >
                  Next
                </button>
              </div>
            </div>
          ) : (
            <div className="flex w-full py-10 px-8 gap-10 justify-center md:flex-row flex-col">
              <div className="flex-1 flex flex-col gap-2">
                <button
                  onClick={() => setOpenAddStudent(true)}
                  className="px-4 py-2 bg-white border border-black rounded-md hover:bg-black hover:text-white duration-300 self-end"
                >
                  Add Student
                </button>
                <Calendar
                  bordered
                  renderCell={renderCell}
                  onSelect={(date) => {
                    if (date >= new Date().setHours(0, 0, 0, 0)) {
                      setAppointmentDate(formatDateCalendar(date));
                      toast.success("Date selected");
                    }
                  }}
                  disabledDate={(date) =>
                    date < new Date().setHours(0, 0, 0, 0)
                  }
                />
              </div>
              {appointmentOnThatDate && (
                <div className="flex-1">
                  <h2 className="font-semibold text-lg mb-2">
                    Available Time Slots
                  </h2>
                  <p>
                    üõë To set an appointment, you must first select a valid date
                    in the calendar, then choose your desired time slot.
                  </p>
                  <p>
                    üõë Do note that you can only select a time slot that has not
                    been taken yet.
                  </p>
                  <div className="flex flex-wrap gap-2 mt-8">
                    {timeSlots.map((time, index) => (
                      <button
                        key={index}
                        disabled={isTimeSlotTaken(time)}
                        onClick={() => handleTimeSlotClick(time)} // Set the selected time on click
                        className={`time-slot-button ${
                          isTimeSlotTaken(time)
                            ? "bg-white border-[1px] border-[#CCE3DE] text-primary-green cursor-not-allowed"
                            : "bg-primary-green text-white hover:bg-primary-green-dark duration-300"
                        }  py-2 px-4 rounded-md`}
                      >
                        {timeFormatter(time)}
                      </button>
                    ))}
                  </div>
                  <hr />
                  <p className="mb-2">
                    üë®üèª‚Äçüéì Select a student you wish to assign an appointment
                  </p>
                  <SearchInput
                    searchTerm={searchTerm}
                    setSearchTerm={setSearchTerm}
                  />
                  <div className="mt-4 w-full max-h-[10%] overflow-y-scroll text-left">
                    {filteredStudents.map((student) => (
                      <button
                        onClick={() => {
                          toast.success(
                            `Student selected: ${student.firstName} ${student.lastName}`
                          );
                          setSelectedStudentId(student.id);
                        }}
                        className="bg-primary-green text-white block w-full mb-2 px-5 py-2 text-left hover:bg-primary-green-dark duration-150 rounded-lg"
                        key={student.id}
                      >
                        {student.idNumber} ‚∏∫ {student.firstName}{" "}
                        {student.lastName}
                      </button>
                    ))}
                  </div>
                  <hr />
                  <div className="mt-4">
                    <p>
                      ü§ó Please state the type of appointment and your purpose.
                    </p>
                    <div className="w-full flex lg:flex-col gap-5 my-5 flex-col">
                      <TextInput
                        value={appointmentType}
                        onChange={(e) => setAppointmentType(e.target.value)}
                        placeholder="Appointment Type"
                        label="Appointment Type"
                      />
                      <TextAreaInput
                        value={purpose}
                        onChange={(e) => setPurpose(e.target.value)}
                        placeholder="Purpose"
                        label="Purpose"
                        className="w-full mb-4 rounded-md "
                        id={purpose}
                      />
                    </div>
                    <hr />
                    <div className="flex flex-col md:flex-row justify-between items-start md:items-center mt-5 rounded-xl px-4 py-2 font-Merriweather gap-4 md:gap-6">
                      <div className="flex flex-col md:flex-row justify-between items-start md:items-center border-2 border-black  rounded-xl md:rounded-full px-4 py-2 font-Merriweather gap-4 md:gap-0 w-full h-auto md:h-[56px]">
                        <div className="font-bold w-full md:w-auto">
                          STUDENT: {selectedStudentId}
                        </div>
                        <div className="font-bold w-full md:w-auto">
                          DATE: {appointmentDate}
                        </div>
                        <div className="font-bold w-full md:w-auto">
                          TIME: {timeFormatter(selectedTime)}
                        </div>
                      </div>
                      <div className="w-full md:w-2/12">
                        <FullButton
                          onClick={handleAppointmentSubmit}
                          className="w-full"
                          disabled={
                            !selectedStudentId ||
                            !selectedTime ||
                            !appointmentDate ||
                            !purpose ||
                            !appointmentType
                          }
                        >
                          Submit
                        </FullButton>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      ) : (
        <Loading />
      )}

      {deleteModal && (
        <ModalDelete
          setDeleteModal={setDeleteModal}
          handleDelete={handleDelete}
          prompt={"appointment"}
        ></ModalDelete>
      )}

      {appointmentModal && (
        <ModalAppointmentInfo
          setAppointmentModal={setAppointmentModal}
          selectedID={selectedID}
          appointments={appointments}
          setAppointments={setAppointments}
          fetchAppointments={fetchAppointments}
          // TO BE ADDED
          // handleRescedule={handleReschedule}
          // handleUpdateStatus={handleUpdateStatus}
        ></ModalAppointmentInfo>
      )}

      {openAddStudent && <AddStudent setOpenAddStudent={setOpenAddStudent} />}
    </div>
  );
};

export default dynamic(() => Promise.resolve(Appointment), { ssr: false });

function SearchInput({ searchTerm, setSearchTerm }) {
  return (
    <div class="relative">
      <input
        type="text"
        placeholder="Search students..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        class="relative w-full h-12 px-4 transition-all border rounded-xl text-slate-500 autofill:bg-white"
      />
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="absolute w-6 h-6 cursor-pointer top-3 right-4 stroke-slate-400 peer-disabled:cursor-not-allowed"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        strokeWidth="1.5"
        aria-hidden="true"
        aria-labelledby="title-9 description-9"
        role="graphics-symbol"
      >
        <title id="title-9">Search icon</title>
        <desc id="description-9">Icon description here</desc>
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        />
      </svg>
    </div>
  );
}

function getTodoList(date) {
  const day = date.getDate();

  switch (day) {
    // case 10:
    //   return [
    //     { time: "10:30 am", title: "Meeting" },
    //     { time: "12:00 pm", title: "Lunch" },
    //     { time: "10:00 pm", title: "Going home to walk the dog" },
    //     { time: "11:00 pm", title: "Going home to walk the dog" },
    //     { time: "12:00 pm", title: "Going home to walk the dog" },
    //     { time: "12:00 pm", title: "Going home to walk the dog" },
    //   ];
    // case 15:
    //   return [
    //     { time: "09:30 pm", title: "Products Introduction Meeting" },
    //     { time: "12:30 pm", title: "Client entertaining" },
    //     { time: "02:00 pm", title: "Product design discussion" },
    //     { time: "05:00 pm", title: "Product test and acceptance" },
    //     { time: "06:30 pm", title: "Reporting" },
    //   ];
    default:
      return [];
  }
}

function renderCell(date) {
  const list = getTodoList(date);

  const displayList = list.filter((item, index) => index < 1);

  if (list.length) {
    const moreCount = list.length - displayList.length;
    const moreItem = (
      <li>
        <Whisper
          placement="top"
          trigger="click"
          speaker={
            <Popover>
              {list.map((item, index) => (
                <p key={index}>
                  <b>{item.time}</b> - {item.title}
                </p>
              ))}
            </Popover>
          }
        >
          <a>{moreCount} more</a>
        </Whisper>
      </li>
    );

    return (
      <ul className="calendar-todo-list">
        {displayList.map((item, index) => (
          <button key={index}>
            <Badge /> <b>{item.time}</b> - {item.title}
          </button>
        ))}
        {moreCount ? moreItem : null}
      </ul>
    );
  }

  return null;
}

function timeFormatter(time) {
  let formmatedTime = "";
  switch (time) {
    case "08:00":
    case "09:00":
    case "10:00":
    case "11:00":
      formmatedTime = `${time} AM`;
      break;
    case "12:00":
    case "1:00":
    case "2:00":
    case "3:00":
    case "4:00":
      formmatedTime = `${time} PM`;
      break;
  }

  return formmatedTime;
}

```

// File: app\counselor\counselor-blog\page.jsx
```
"use client";
import { Navbar } from "@/components/ui/Navbar";
import { useState } from "react";
// import "../../../css/createblog.css";
import CreatePostSection from "@/components/ui/CreatePost";

export default function CounselorBlog() {
  const [selectedButton, setSelectedButton] = useState("view");
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  const handleButtonClick = (button) => {
    setSelectedButton(button);
    if (button === "create") {
      setIsCreateModalOpen(true);
    }
  };
  return (
    <div>
      <main className="min-h-screen">
        <Navbar userType="counselor" />
        <div
          className="pattern-overlay pattern-left absolute -z-10"
          style={{ transform: "scaleY(-1)", top: "-50px" }}
        >
          <img src="/images/landing/lleft.png" alt="pattern" />
        </div>
        <div
          className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
          style={{ transform: "scaleY(-1)", top: "-15px" }}
        >
          <img
            src="/images/landing/lright.png"
            alt="pattern"
            className="w-full h-full object-contain"
          />
        </div>

        <div className="py-36">
          <CreatePostSection />
        </div>
      </main>
    </div>
  );
}

```

// File: app\counselor\counselor-dashboard\page.jsx
```
export default function Home() {
  return (
    <div>
      <h1>Home</h1>
    </div>
  );
}

```

// File: app\counselor\counselor-events\page.jsx
```
"use client";

import { Navbar } from "@/components/ui/Navbar";
import hdrEvents from "@/public/images/headers/hdrEvents.png";
import { useState } from "react";

// css
import "@/styles/counselor.css";

// modals
import ModalEventsInfo from "@/components/ui/modals/counselor/events/ModalEventsInfo";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";

export default function Home() {
	const eventsPerPage = 10;

	const [selectedID, setSelectedID] = useState(null);
	const [currentPage, setCurrentPage] = useState(1);

	//modals
	const [deleteModal, setDeleteModal] = useState(false);
	const [eventModal, setEventModal] = useState(null);

	// events sample
	const [events, setEvents] = useState([
		{
			id: 1,
			date: "2024-05-04",
			time: "10:00 AM",
			user: {
				idNumber: "2024-0001",
				firstName: "John",
				lastName: "Doe",
				institutionalEmail: "john.doe@example.com",
				image: "/path/to/image.jpg",
			},
			name: "Event 1 Name",
			type: "Event 1 Type",
			location: "Location 1",
			additional_notes: "Event 1 Additional Notes here ...",
			status: "Upcoming",
		},
	]);

	const handleRowClick = (id) => {
		setSelectedID(id);
		setEventModal(true);
	};

	const showDeleteModal = (id) => {
		setSelectedID(id);
		setDeleteModal(true);
	};

	const handleDelete = () => {
		// Find
		const selected = events.find((event) => event.id === selectedID);

		// Delete
		const newEvents = events.filter((event) => event.id !== selectedID);
		setEvents(newEvents);

		// Reset
		setDeleteModal(false);
		setSelectedID(null);
	};

	// handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
	// const handleReschedule = () => {
	// 	// Find
	// 	const selected = appointments.find(
	// 		(appointment) => appointment.id === selectedID
	// 	);

	// Calculate the index range of events to display for the current page
	const indexOfLastInquiry = currentPage * eventsPerPage;
	const indexOfFirstInquiry = indexOfLastInquiry - eventsPerPage;
	const currentevents = events?.slice(indexOfFirstInquiry, indexOfLastInquiry);

	return (
		<div className="min-h-screen w-full">
			{/* navigation bar */}
			<Navbar userType="counselor" />

			{/* header */}
			<div className="w-full h-[55vh] relative">
				{/* Background image */}
				<div
					className="absolute inset-0 bg-cover bg-center opacity-40"
					style={{
						backgroundImage: `url(${hdrEvents.src})`,
					}}
				></div>

				{/* Content */}
				<div className="relative z-10 flex items-center justify-center h-full">
					<div className="flex flex-col text-left px-44 py-10 gap-y-4">
						<h1 className="font-Merriweather text-8xl">Events</h1>
						<p className="w-1/2 font-Jaldi text-xl">
							Facilitate student events and foster meaningful connections with
							counselors. Students can ask questions, seek guidance, and receive
							personalized support to navigate their academic and personal journey
							effectively.
						</p>
					</div>
				</div>
			</div>

			<div className="flex flex-col text-center">
				{/* table*/}
				<div className="overflow-x-auto px-56 py-10 ">
					<table className="table bg-gray-100">
						{/* head */}
						<thead>
							<tr className="bg-gray-200 font-bold">
								<th className="text-center p-5">ID</th>
								<th>Date and Time</th>
								<th>Event Setter</th>
								<th className="">Event Name</th>
								<th className="">Location</th>
								<th className="text-center">Status</th>
								{/* Delete and Edit*/}
								<th className="no-hover-highlight"></th>
							</tr>
						</thead>
						<tbody>
							{currentevents?.map((event) => (
								<tr
									key={event.id}
									onClick={() => handleRowClick(event.id)}
									className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
								>
									<td className="text-center">{event.id}</td>
									<td>
										<div className="flex flex-row gap-x-3">
											<div className="text-sm">{event.date}</div>
										</div>
									</td>
									<td>
										<div className="flex items-center gap-3">
											<div className="avatar">
												<div className="mask mask-squircle w-12 h-12">
													<img
														src={event.user.image}
														alt="Avatar Tailwind CSS Component"
													/>
												</div>
											</div>
											<div>
												<div className="font-bold">
													{event.user.firstName} {event.user.lastName}
												</div>
												<div className="text-sm opacity-50">
													{event.user.institutionalEmail}
												</div>
											</div>
										</div>
									</td>
									<td>
										<p>
											{event.name.length > 50
												? `${event.name.substring(0, 40)}...`
												: event.name}
										</p>
									</td>
									<td>
										<p>{event.location}</p>
									</td>
									<td className="text-center">
										<div
											className={`w-24 h-5 badge badge-xs ${
												event.status === "Upcoming"
													? "badge-warning"
													: event.status === "Cancelled"
													? "badge-error"
													: event.status === "Completed"
													? "badge-success"
													: ""
											}`}
										>
											{event.status}
										</div>
									</td>

									{/* Delete and Edit */}
									<td>
										<div className="flex flex-row justify-center items-center gap-x-5">
											<button
												className="btn btn-xs"
												onClick={(e) => {
													// Stop event propagation to prevent row hover effect
													e.stopPropagation();
													showDeleteModal(event.id);
												}}
											>
												Delete
											</button>
											<button className="btn btn-xs text-green-700">
												Edit
											</button>
										</div>
									</td>
								</tr>
							))}
						</tbody>
					</table>

					{/* Pagination controls */}
					<div className="join pt-5">
						<button
							onClick={() => setCurrentPage(currentPage - 1)}
							disabled={currentPage === 1}
							className="join-item btn w-28"
						>
							Previous
						</button>

						{events &&
							[...Array(Math.ceil((events?.length || 1) / eventsPerPage))].map(
								(_, index) => (
									<button
										key={index}
										className={`join-item btn ${
											currentPage === index + 1 ? "btn-active" : ""
										}`}
										onClick={() => setCurrentPage(index + 1)}
									>
										{index + 1}
									</button>
								)
							)}

						<button
							onClick={() => setCurrentPage(currentPage + 1)}
							disabled={eventsPerPage > events?.length}
							className="join-item btn w-28"
						>
							Next
						</button>
					</div>
				</div>
			</div>

			{/* modals */}
			{deleteModal && (
				<ModalDelete
					setDeleteModal={setDeleteModal}
					handleDelete={handleDelete}
				></ModalDelete>
			)}

			{eventModal && (
				<ModalEventsInfo
					setEventModal={setEventModal}
					selectedID={selectedID}
					events={events}
				></ModalEventsInfo>
			)}
		</div>
	);
}

```

// File: app\counselor\counselor-inquiry\page.jsx
```
"use client";

import { Navbar } from "@/components/ui/Navbar";
import { API_ENDPOINT } from "@/lib/api";
import hdrInquiry from "@/public/images/headers/hdrInquiry.png";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
// css
import "@/styles/counselor.css";

// modals
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";
import ModalInquiryInfo from "@/components/ui/modals/counselor/inquiries/ModalInquiryInfo";

export default function Home() {
  const inquiriesPerPage = 10;

  const [selectedID, setSelectedID] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);

  //modals
  const [deleteModal, setDeleteModal] = useState(false);
  const [inquiryModal, setInquiryModal] = useState(null);

  // inquiries sample
  const [inquiries, setInquiries] = useState([]);

  const fetchInquiries = async () => {
    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_INQUIRIES}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch inquiries");
      }

      const data = await response.json();
      console.log(data);
      setInquiries(data);
    } catch (error) {
      console.error("Error fetching inquiries:", error);
    }
  };

  useEffect(() => {
    fetchInquiries();
  }, []);

  const handleRowClick = (id) => {
    setSelectedID(id);
    setInquiryModal(true);
  };

  const showDeleteModal = (id) => {
    setSelectedID(id);
    setDeleteModal(true);
  };

  // const handleDelete = async () => {
  // 	// // Find
  // 	// const selected = inquiries.find((inquiry) => inquiry.id === selectedID);

  // 	// // Delete
  // 	// const newInquiries = inquiries.filter(
  // 	//   (inquiry) => inquiry.id !== selectedID
  // 	// );
  // 	// setInquiries(newInquiries);

  // 	try {
  // 		const response = await fetch(`/api/inquiry/delete-inquiry`, {
  // 			method: "PUT",
  // 			headers: {
  // 				"Content-Type": "application/json",
  // 			},
  // 			body: JSON.stringify({ inquiryId: selectedID }),
  // 		});
  // 		console.log(response);
  // 	} catch {
  // 		throw new Error("Failed to delete inquiry");
  // 	}

  // 	// Reset
  // 	setDeleteModal(false);
  // 	setSelectedID(null);
  // };
  const handleDelete = async () => {
    try {
      const response = await fetch(`/api/inquiry/delete-inquiry`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ inquiryId: selectedID }),
      });
      const data = await response.json();
      console.log(data);

      // Update local state to reflect the deletion
      const updatedInquiries = inquiries.filter(
        (inquiry) => inquiry.inquiryId !== selectedID
      );
      setInquiries(updatedInquiries);

      // Close modal and reset selected ID
      setDeleteModal(false);
      setSelectedID(null);
    } catch (error) {
      console.error("Failed to delete inquiry", error);
    }
  };
  // Calculate the index range of inquiries to display for the current page
  const indexOfLastInquiry = currentPage * inquiriesPerPage;
  const indexOfFirstInquiry = indexOfLastInquiry - inquiriesPerPage;
  const currentInquiries = inquiries?.slice(
    indexOfFirstInquiry,
    indexOfLastInquiry
  );

  return (
    <div className="min-h-screen w-full">
      {/* navigation bar */}
      <Navbar userType="counselor" />

      {/* header */}
      <div className="w-full h-[55vh] relative">
        {/* Background image */}
        <div
          className="absolute inset-0 bg-cover bg-center opacity-40"
          style={{
            backgroundImage: `url(${hdrInquiry.src})`,
          }}
        ></div>

        {/* Content */}
        <div className="relative z-10 flex items-center justify-center h-full">
          <div className="flex flex-col text-left px-44 py-10 gap-y-4">
            <h1 className="font-Merriweather text-8xl">Inquiries</h1>
            <p className="w-1/2 font-Jaldi text-xl">
              Facilitate student inquiries and foster meaningful connections
              with counselors. Students can ask questions, seek guidance, and
              receive personalized support to navigate their academic and
              personal journey effectively.
            </p>
          </div>
        </div>
      </div>

      <div className="flex flex-col text-center">
        {/* table*/}
        <div className="overflow-x-auto px-56 py-10 ">
          <table className="table bg-gray-100">
            {/* head */}
            <thead>
              <tr className="bg-gray-200 font-bold">
                <th className="text-center p-5" style={{ width: "5%" }}>
                  ID
                </th>
                <th style={{ width: "15%" }}>Date and Time</th>
                <th style={{ width: "20%" }}>Inquirer</th>
                <th style={{ width: "15%" }}>Subject of Inquiry</th>
                <th className="text-center" style={{ width: "10%" }}>
                  Status
                </th>
                {/* Delete and Edit*/}
                <th
                  className="no-hover-highlight"
                  style={{ width: "10%" }}
                ></th>
              </tr>
            </thead>
            <tbody>
              {currentInquiries?.map((inquiry) => (
                <tr
                  key={inquiry.inquiryId}
                  onClick={() => handleRowClick(inquiry.inquiryId)}
                  className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
                >
                  <td className="text-center">{inquiry.inquiryId}</td>
                  <td>
                    <div className="flex flex-row gap-x-3">
                      <div className="text-sm">{inquiry.date}</div>
                    </div>
                  </td>
                  <td>
                    <div className="flex items-center gap-3">
                      <div className="avatar">
                        <div className="mask mask-squircle w-12 h-12">
                          <img
                            src={inquiry?.sender.image}
                            alt="Avatar Tailwind CSS Component"
                          />
                        </div>
                      </div>
                      <div>
                        <div className="font-bold">
                          {inquiry?.sender?.firstName}{" "}
                          {inquiry?.sender?.lastName}
                        </div>
                        <div className="text-sm opacity-50">
                          {inquiry.sender.institutionalEmail}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <p>
                      {inquiry.subject.length > 50
                        ? `${inquiry.subject.substring(0, 40)}...`
                        : inquiry.subject}
                    </p>
                  </td>
                  <td className="text-center">
                    <div
                      className={`w-24 h-5 badge badge-xs ${
                        inquiry.status === false
                          ? "badge-warning"
                          : "badge-success"
                      }`}
                    >
                      {inquiry.status ? "Replied" : "Pending"}
                    </div>
                  </td>

                  {/* Delete and Edit */}
                  <td>
                    <div className="flex flex-row justify-center items-center gap-x-5">
                      <button
                        className="btn btn-xs"
                        onClick={(e) => {
                          // Stop event propagation to prevent row hover effect
                          e.stopPropagation();
                          showDeleteModal(inquiry.inquiryId);
                        }}
                      >
                        Delete
                      </button>
                      <button className="btn btn-xs text-green-700">
                        Edit
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination controls */}
          <div className="join pt-5">
            <button
              onClick={() => setCurrentPage(currentPage - 1)}
              disabled={currentPage === 1}
              className="join-item btn w-28"
            >
              Previous
            </button>

            {inquiries &&
              [
                ...Array(
                  Math.ceil((inquiries?.length || 1) / inquiriesPerPage)
                ),
              ].map((_, index) => (
                <button
                  key={index}
                  className={`join-item btn ${
                    currentPage === index + 1 ? "btn-active" : ""
                  }`}
                  onClick={() => setCurrentPage(index + 1)}
                >
                  {index + 1}
                </button>
              ))}

            <button
              onClick={() => setCurrentPage(currentPage + 1)}
              disabled={inquiriesPerPage > inquiries?.length}
              className="join-item btn w-28"
            >
              Next
            </button>
          </div>
        </div>
      </div>

      {/* modals */}
      {deleteModal && (
        <ModalDelete
          setDeleteModal={setDeleteModal}
          handleDelete={handleDelete}
        ></ModalDelete>
      )}

      {inquiryModal && (
        <ModalInquiryInfo
          setInquiryModal={setInquiryModal}
          selectedID={selectedID}
          inquiries={inquiries}
          fetchInquiries={fetchInquiries}
        ></ModalInquiryInfo>
      )}
    </div>
  );
}

```

// File: app\counselor\counselor-referral\page.jsx
```
"use client";

import hdrReferrals from "@/public/images/headers/hdrReferrals.png";
import { useState } from "react";

// css
import "@/styles/counselor.css";

// modals
import { Navbar } from "@/components/ui/landing/LandingNav";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";
import ModalReferralInfo from "@/components/ui/modals/counselor/referrals/ModalReferralInfo";

export default function Referral() {
	const ReferralsPerPage = 10;

	const [selectedID, setSelectedID] = useState(null);
	const [currentPage, setCurrentPage] = useState(1);

	//modals
	const [deleteModal, setDeleteModal] = useState(false);
	const [referralModal, setReferralModal] = useState(null);

	// appointment sample
	const [referrals, setReferrals] = useState([
		{
			id: 1,
			date: "Sep 8, 2024",
			time: "10:00 AM",
			referred: {
				name: "France Gieb S. Mier",
				email: "francegieb.mier@example.com",
				avatar: "/avatar-charlotte.png",
				idNumber: "21-2345-678",
			},
			referree: {
				name: "Charlotte Dela Cruz",
				email: "",
				avatar: "/avatar-charlotte.png",
				idNumber: "2345",
			},
			reason: "Request for extended warranty",
			additional_notes:
				"Nam fringilla sapien sed libero finibus ultrices. Proin sed libero vestibulum, maximus nulla nec, fermentum odio.",
			status: "Pending", // Pending, Appointed
		},
		{
			id: 2,
			date: "Sep 10, 2024",
			time: "11:30 AM",
			referred: {
				name: "John Doe",
				email: "john.doe@example.com",
				avatar: "/avatar-john.png",
				idNumber: "32-4567-890",
			},
			referree: {
				name: "Jane Smith",
				email: "",
				avatar: "/avatar-jane.png",
				idNumber: "4567",
			},
			reason: "Product inquiry",
			additional_notes:
				"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor nulla non nisl maximus, nec aliquam turpis laoreet.",
			status: "Pending",
		},
		{
			id: 3,
			date: "Sep 12, 2024",
			time: "3:00 PM",
			referred: {
				name: "Alice Johnson",
				email: "alice.johnson@example.com",
				avatar: "/avatar-alice.png",
				idNumber: "43-6789-012",
			},
			referree: {
				name: "Bob Brown",
				email: "",
				avatar: "/avatar-bob.png",
				idNumber: "6789",
			},
			reason: "Technical support",
			additional_notes:
				"Vivamus nec magna rutrum, molestie lacus nec, eleifend libero. Nulla facilisi. Sed sed risus eu arcu tincidunt bibendum.",
			status: "Appointed",
		},
	]);

	const handleRowClick = (id) => {
		setSelectedID(id);
		setReferralModal(true);
	};

	const showDeleteModal = (id) => {
		setSelectedID(id);
		setDeleteModal(true);
	};

	const handleDelete = () => {
		// Find
		const selected = referrals.find(
			(referral) => referral.id === selectedID
		);

		// Delete
		const newReffera = referrals.filter(
			//
			(referral) => referral.id !== selectedID
		);
		setReferrals(newReffera);

		// Reset
		setDeleteModal(false);
		setSelectedID(null);
	};

	// handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
	// const handleReschedule = () => {
	// 	// Find
	// 	const selected = referrals.find(
	// 		(refferal) => refferal.id === selectedID
	// 	);

	// Calculate the index range of refferal to display for the current page
	const indexOfLastInquiry = currentPage * ReferralsPerPage;
	const indexOfFirstInquiry = indexOfLastInquiry - ReferralsPerPage;
	const currentA = referrals.slice(indexOfFirstInquiry, indexOfLastInquiry);

	return (
		<div className="min-h-screen w-full">
			{/* navigation bar */}
			<Navbar userType="counselor" />

			{/* header */}
			<div className="w-full h-[55vh] relative">
				{/* Background image */}
				<div
					className="absolute inset-0 bg-cover bg-center opacity-40"
					style={{
						backgroundImage: `url(${hdrReferrals.src})`,
					}}></div>

				{/* Content */}
				<div className="relative z-10 flex items-center justify-center h-full">
					<div className="flex flex-col text-left px-44 py-10 gap-y-4">
						<h1 className="font-Merriweather text-8xl">
							Referrals
						</h1>
						<p className="w-1/2 font-Jaldi text-xl">
							Manage sessions effortlessly and provide tailored
							guidance and support to students through efficient
							booking and coordination. Streamline your scheduling
							process and ensure students receive personalized
							attention.
						</p>
					</div>
				</div>
			</div>

			<div className="flex flex-col text-center">
				{/* table*/}
				<div className="overflow-x-auto px-56 py-10 ">
					<table className="table bg-gray-100">
						{/* head */}
						<thead>
							<tr className="bg-gray-200 font-bold">
								<th className="text-center p-5">ID</th>
								<th>Date and Time</th>
								<th className="p-5">ID Number</th>
								<th>Referred Student</th>
								<th className="">Reason</th>
								<th className="text-center">Status</th>
								{/* Delete and Edit*/}
								<th className="no-hover-highlight"></th>
							</tr>
						</thead>
						<tbody>
							{currentA.map((referrals) => (
								<tr
									key={referrals.id}
									onClick={() => handleRowClick(referrals.id)}
									className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out">
									<td className="text-center">
										{referrals.id}
									</td>
									<td>
										<div className="flex flex-row gap-x-3">
											<div className="text-sm">
												{referrals.date}
											</div>
										</div>
									</td>
									<td>
										<div className="flex flex-row gap-x-3">
											<div>
												{referrals.referred.idNumber}
											</div>
										</div>
									</td>
									<td>
										<div className="flex items-center gap-3">
											<div className="avatar">
												<div className="mask mask-squircle w-12 h-12">
													<img
														src={
															referrals.referred
																.avatar
														}
														alt="Avatar Tailwind CSS Component"
													/>
												</div>
											</div>
											<div>
												<div className="font-bold">
													{referrals.referred.name}
												</div>
												<div className="text-sm opacity-50">
													{referrals.referred.email}
												</div>
											</div>
										</div>
									</td>
									<td>
										<p>
											{referrals.reason.length > 50
												? `${referrals.reason.substring(
														0,
														40
												  )}...`
												: referrals.reason}
										</p>
									</td>
									<td className="text-center">
										<div
											className={`w-24 h-5 badge badge-xs ${
												referrals &&
												referrals.status === "Pending"
													? "badge-warning"
													: referrals &&
													  referrals.status ===
															"Responded"
													? "badge-success"
													: referrals &&
													  referrals.status ===
															"Appointed"
													? "badge-info"
													: ""
											}`}>
											{referrals.status}
										</div>
									</td>

									{/* Delete and Edit */}
									<td>
										<div className="flex flex-row justify-center items-center gap-x-5">
											<button
												className="btn btn-xs"
												onClick={(e) => {
													// Stop event propagation to prevent row hover effect
													e.stopPropagation();
													showDeleteModal(
														referrals.id
													);
												}}>
												Delete
											</button>
											<button className="btn btn-xs text-green-700">
												Edit
											</button>
										</div>
									</td>
								</tr>
							))}
						</tbody>
					</table>

					{/* Pagination controls */}
					<div className="join pt-5">
						<button
							onClick={() => setCurrentPage(currentPage - 1)}
							disabled={currentPage === 1}
							className="join-item btn w-28">
							Previous
						</button>
						{[
							...Array(
								Math.ceil(referrals.length / ReferralsPerPage)
							),
						].map((_, index) => (
							<button
								key={index}
								className={`join-item btn ${
									currentPage === index + 1
										? "btn-active"
										: ""
								}`}
								onClick={() => setCurrentPage(index + 1)}>
								{index + 1}
							</button>
						))}
						<button
							onClick={() => setCurrentPage(currentPage + 1)}
							disabled={ReferralsPerPage > referrals.length}
							className="join-item btn w-28">
							Next
						</button>
					</div>
				</div>
			</div>

			{/* modals */}
			{deleteModal && (
				<ModalDelete
					setDeleteModal={setDeleteModal}
					handleDelete={handleDelete}></ModalDelete>
			)}

			{referralModal && (
				<ModalReferralInfo
					setReferralModal={setReferralModal}
					selectedID={selectedID}
					referrals={referrals}

					// TO BE ADDED
					// handleRescedule={handleReschedule}
					// handleUpdateStatus={handleUpdateStatus}
				></ModalReferralInfo>
			)}
		</div>
	);
}

```

// File: app\counselor\profile\page.jsx
```
"use client";
import Loading from "@/components/Loading";
import { Navbar } from "@/components/ui/Navbar";
import FullButton from "@/components/ui/buttons/FullButton";
import HollowButton from "@/components/ui/buttons/HollowButton";
import TextInput from "@/components/ui/inputs/TextInput";
import toast from "react-hot-toast";
import { imgDB } from "@/firebaseConfig";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import { PlusIcon } from "@heroicons/react/solid";
import { getDownloadURL, ref, uploadBytes } from "firebase/storage";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import { v4 } from "uuid"; // Make sure this is configured correctly
import { logout } from "@/lib/helperFunctions";

export default function Profile() {
  const [isEditMode, setIsEditMode] = useState(false);
  const [counselorProfile, setCounselorProfile] = useState(null);
  const [updatedProfile, setUpdatedProfile] = useState({});
  const [loading, setLoading] = useState(true);
  const [passwords, setPasswords] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [showInvalidPassword, setShowInvalidPassword] = useState({
    currentPassword: false,
    newPassword: false,
    confirmPassword: false,
    passwordMismatch: false,
  });

  const userSession = getUserSession();

  useEffect(() => {
    const fetchCounselorProfile = async () => {
      try {
        const response = await fetch(
          `${process.env.BASE_URL}${API_ENDPOINT.GET_COUNSELOR_BY_ID}${userSession.id}`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${Cookies.get("token")}`,
            },
          }
        );
        if (!response.ok) {
          throw new Error("Failed to fetch posts");
        }
        const data = await response.json();
        setCounselorProfile(data);
        setUpdatedProfile(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching posts:", error);
        setLoading(false);
      }
    };

    fetchCounselorProfile();
  }, []);

  if (userSession && userSession.role !== "counselor") {
    return <Loading route={userSession.role} />;
  }

  const handleUpdateProfile = () => {
    setIsEditMode(true);
  };

  const validatePassword = (password) => {
    const regex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return regex.test(password);
  };

  const handleChange = (key) => (e) => {
    const value = e.target.value;
    setUpdatedProfile((prevProfile) => ({
      ...prevProfile,
      [key]: value,
    }));
  };

  console.log(updatedProfile);

  const handleCancelEdit = () => {
    setIsEditMode(false);
    setUpdatedProfile(counselorProfile);
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();
    if (passwords.newPassword !== passwords.confirmPassword) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        passwordMismatch: true,
      }));
      return;
    }

    if (passwords.newPassword && !validatePassword(passwords.newPassword)) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        newPassword: true,
      }));
      toast.error(
        "Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character."
      );
      return;
    }

    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.UPDATE_COUNSELOR}${userSession.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
          body: JSON.stringify({
            institutionalEmail: updatedProfile.institutionalEmail,
            idNumber: updatedProfile.idNumber,
            firstName: updatedProfile.firstName,
            lastName: updatedProfile.lastName,
            gender: updatedProfile.gender,
            image: updatedProfile.image,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Server error response:", errorData);
        throw new Error(
          `Failed to update counselor profile: ${response.statusText}`
        );
      }

      if (passwords.newPassword && passwords.confirmPassword) {
        try {
          const passwordResponse = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.CHANGE_PASSWORD}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${Cookies.get("token")}`,
              },
              body: JSON.stringify({
                email: updatedProfile.institutionalEmail,
                oldPassword: passwords.currentPassword,
                newPassword: passwords.newPassword,
              }),
            }
          );

          if (!passwordResponse.ok) {
            const errorData = await passwordResponse.json();
            console.error("Server error response:", errorData);
            throw new Error(
              `Failed to update password: ${passwordResponse.statusText}`
            );
          } else {
            toast.success(
              "Profile updated successfully. You will be logged out for security reasons. Please log in again."
            );
            setTimeout(() => {
              logout();
            }, 3000);
          }
        } catch (error) {
          console.error("Error updating password:", error);
        }
      }

      const data = await response.json();
      setCounselorProfile(data);
      setIsEditMode(false);
    } catch (error) {
      console.error("Error updating counselor profile:", error);
    }
  };

  const handlePasswordChange = (label) => (e) => {
    const pw = e.target.value;

    setPasswords((prevPasswords) => ({
      ...prevPasswords,
      [label]: pw,
    }));

    setShowInvalidPassword((prevShowInvalidPassword) => ({
      ...prevShowInvalidPassword,
      [label]: pw && !validatePassword(pw),
      passwordMismatch:
        label === "confirmPassword" ? pw !== passwords.newPassword : false,
    }));
  };

  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (file) {
      const imgRef = ref(imgDB, `UserAvatars/${v4()}`);
      const snapshot = await uploadBytes(imgRef, file);
      const imgUrl = await getDownloadURL(snapshot.ref);
      setUpdatedProfile((prevProfile) => ({
        ...prevProfile,
        image: imgUrl,
      }));
    }
  };

  if (loading) {
    return <Loading />;
  }

  return (
    <div className="p-4 mt-16 md:p-12">
      <Navbar userType="counselor" />
      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>
      <section className="w-full pt-4 md:mt-6 p-8 md:p-12 flex flex-col justify-center items-center">
        <div className="w-full max-w-screen-lg mx-auto flex flex-col gap-4 md:gap-8">
          <section className="flex flex-col md:flex-row md:gap-10 mb-8 justify-center items-center">
            {/* Avatar */}
            <div className="w-full md:w-2/12 flex justify-center items-center avatar relative">
              <div className="w-48 rounded-full ring ring-[#6B9080] ring-offset-base-100 ring-offset-1">
                <img src={counselorProfile?.image} alt="avatar" />
                {isEditMode && (
                  <label
                    htmlFor="file-upload"
                    className="absolute bottom-0 right-5 bg-primary-green text-white p-1 rounded-full cursor-pointer"
                  >
                    <input
                      id="file-upload"
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleFileChange}
                    />
                    <PlusIcon className="h-5 w-5 text-white" />
                  </label>
                )}
              </div>
            </div>
            {/* User Info */}
            <div className="w-full md:w-10/12 flex flex-col justify-center md:mt-0 mt-4">
              <h1 className="font-Merriweather text-2xl md:text-4xl font-bold tracking-tight mt-4">
                Hello, {counselorProfile?.firstName}{" "}
                {counselorProfile?.lastName}
              </h1>
              <p className="font-Merriweather tracking-tight font-thin my-2">
                {counselorProfile?.institutionalEmail}
              </p>
              <div className="w-full md:w-5/12 mt-1">
                {!isEditMode && (
                  <FullButton onClick={handleUpdateProfile}>
                    Update Profile
                  </FullButton>
                )}
              </div>
            </div>
          </section>

          <section className="flex flex-col md:flex-row gap-6 md:gap-10 mt-2">
            {/* User Information */}
            <div className="w-full md:w-4/6">
              <div className="">
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  User Information
                </h1>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-full">
                    <TextInput
                      label="First Name"
                      value={
                        isEditMode
                          ? updatedProfile?.firstName
                          : counselorProfile?.firstName
                      }
                      onChange={handleChange("firstName")}
                      placeholder="First Name"
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full md:w-full">
                    <TextInput
                      label="Last Name"
                      value={
                        isEditMode
                          ? updatedProfile.lastName
                          : counselorProfile?.lastName
                      }
                      onChange={handleChange("lastName")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                </div>
              </div>
              {/* College Information */}
              <div>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="ID Number"
                      value={
                        isEditMode
                          ? updatedProfile.idNumber
                          : counselorProfile?.idNumber
                      }
                      onChange={handleChange("idNumber")}
                      readOnly
                      disabled
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Gender"
                      value={
                        isEditMode
                          ? updatedProfile.gender
                          : counselorProfile?.gender
                      }
                      onChange={handleChange("gender")}
                      readOnly
                      disabled
                    />
                  </div>
                </div>
              </div>
              {/* Additional Details */}
            </div>
            {/* Security Information */}
            <div className="w-full md:w-2/6">
              <div>
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  Security Information
                </h1>
                <div className="flex flex-col gap-6">
                  <TextInput
                    type="password"
                    id="currentPassword"
                    value={passwords.currentPassword}
                    onChange={handlePasswordChange("currentPassword")}
                    placeholder="Enter current password"
                    label="Current Password"
                    showInvalidPassword={showInvalidPassword.currentPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  {/* New Password */}
                  <TextInput
                    type="password"
                    id="newPassword"
                    value={passwords.newPassword}
                    onChange={handlePasswordChange("newPassword")}
                    placeholder="Enter new password"
                    label="New Password"
                    showInvalidPassword={showInvalidPassword.newPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  <TextInput
                    type="password"
                    id="confirmPassword"
                    value={passwords.confirmPassword}
                    onChange={handlePasswordChange("confirmPassword")}
                    placeholder="Confirm new password"
                    label="Confirm Password"
                    showInvalidPassword={showInvalidPassword.confirmPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  {showInvalidPassword.passwordMismatch && (
                    <p className="text-red-500">Passwords do not match.</p>
                  )}
                </div>
              </div>
            </div>
          </section>

          {isEditMode && (
            <div className="flex justify-end mt-4">
              <div className="flex flex-row gap-6 w-full">
                <HollowButton onClick={handleCancelEdit}>Cancel</HollowButton>
                <FullButton onClick={handleSaveProfile}>Save</FullButton>
              </div>
            </div>
          )}
        </div>
      </section>
    </div>
  );
}

```

// File: app\counselor\student-list\page.jsx
```
"use client";

import hdrAppointment from "@/public/images/headers/hdrAppointment.png";
import { useState, useEffect } from "react";

// css
import "@/styles/counselor.css";

// modals
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";
import ModalAppointmentInfo from "@/components/ui/modals/counselor/appointments/ModalAppointmentInfo";
import { Navbar } from "@/components/ui/Navbar";

export default function Appointment() {
	const StudentsPerPage = 10;

	const [selectedID, setSelectedID] = useState(null);
	const [currentPage, setCurrentPage] = useState(1);

	//modals
	const [deleteModal, setDeleteModal] = useState(false);
	const [studentModal, setStudentModal] = useState(null);

	// student sample data
	const [students, setStudents] = useState([
		{
			id: 1,
			name: "John Doe",
			email: "john.doe@example.com",
			idNumber: "123456789",
			program: "Computer Science",
			year: "4th Year",
			contactNo: "123-456-7890",
		},
		{
			id: 2,
			name: "Jane Smith",
			email: "jane.smith@example.com",
			idNumber: "987654321",
			program: "Engineering",
			year: "3rd Year",
			contactNo: "987-654-3210",
		},
		// Add more student data here as needed
	]);

	const handleRowClick = (id) => {
		setSelectedID(id);
		setStudentModal(true);
	};

	const showDeleteModal = (id) => {
		setSelectedID(id);
		setDeleteModal(true);
	};

	const handleDelete = () => {
		// Find
		const selected = students.find((student) => student.id === selectedID);

		// Delete
		const newStudents = students.filter(
			(student) => student.id !== selectedID
		);
		setStudents(newStudents);

		// Reset
		setDeleteModal(false);
		setSelectedID(null);
	};

	// handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
	// const handleReschedule = () => {
	// 	// Find
	// 	const selected = appointments.find(
	// 		(appointment) => appointment.id === selectedID
	// 	);

	// Calculate the index range of appointment to display for the current page
	const indexOfLastInquiry = currentPage * StudentsPerPage;
	const indexOfFirstInquiry = indexOfLastInquiry - StudentsPerPage;
	const currentStudents = students?.slice(
		indexOfFirstInquiry,
		indexOfLastInquiry
	);

	return (
		<div className="min-h-screen w-full">
			{/* navigation bar */}
			<Navbar userType="counselor" />

			{/* header */}
			<div className="w-full h-[35vh] relative">
				{/* Background image */}
				<div
					className="absolute inset-0 bg-cover bg-center opacity-40"
					style={{
						backgroundImage: `url(${hdrAppointment.src})`,
					}}
				></div>

				{/* Content */}
				<div className="relative z-10 flex items-center justify-center h-full">
					<div className="flex flex-col text-left px-44 py-10 gap-y-4">
						<h1 className="font-Merriweather text-8xl">
							Student Records
						</h1>
					</div>
				</div>
			</div>

			<div className="flex flex-col text-center">
				{/* table*/}
				<div className="overflow-x-auto px-56 py-10 ">
					<table className="table bg-gray-100">
						{/* head */}
						<thead>
							<tr className="bg-gray-200 font-bold">
								<th className="text-center p-5">ID</th>
								<th>Date and Time</th>
								<th className="p-5">ID Number</th>
								<th>Student</th>
								<th className="">Reason</th>
								<th className="text-center">Status</th>
								{/* Delete and Edit*/}
								<th className="no-hover-highlight"></th>
							</tr>
						</thead>
						<tbody>
							{currentStudents?.map((appointments) => (
								<tr
									key={appointments.id}
									onClick={() =>
										handleRowClick(appointments.id)
									}
									className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
								>
									<td className="text-center">
										{appointments.id}
									</td>
									<td>
										<div className="flex flex-row gap-x-3">
											<div className="text-sm">
												{appointments.dateTime}
											</div>
										</div>
									</td>
									<td>
										<div className="flex flex-row gap-x-3">
											<div>
												{appointments.setter.idNumber}
											</div>
										</div>
									</td>
									<td>
										<div className="flex items-center gap-3">
											<div className="avatar">
												<div className="mask mask-squircle w-12 h-12">
													<img
														src={
															appointments.setter
																.avatar
														}
														alt="Avatar Tailwind CSS Component"
													/>
												</div>
											</div>
											<div>
												<div className="font-bold">
													{appointments.setter.name}
												</div>
												<div className="text-sm opacity-50">
													{appointments.setter.email}
												</div>
											</div>
										</div>
									</td>
									<td>
										<p>
											{appointments.subject.length > 50
												? `${appointments.subject.substring(
														0,
														40
												  )}...`
												: appointments.subject}
										</p>
									</td>
									<td className="text-center">
										<div
											className={`w-24 h-5 badge badge-xs ${
												appointments &&
												appointments.status ===
													"Pending"
													? "badge-warning"
													: appointments &&
													  appointments.status ===
															"Responded"
													? "badge-success"
													: appointments &&
													  appointments.status ===
															"Appointed"
													? "badge-info"
													: ""
											}`}
										>
											{appointments.status}
										</div>
									</td>

									{/* Delete and Edit */}
									<td>
										<div className="flex flex-row justify-center items-center gap-x-5">
											<button
												className="btn btn-xs"
												onClick={(e) => {
													// Stop event propagation to prevent row hover effect
													e.stopPropagation();
													showDeleteModal(
														appointments.id
													);
												}}
											>
												Delete
											</button>
											<button className="btn btn-xs text-green-700">
												Edit
											</button>
										</div>
									</td>
								</tr>
							))}
						</tbody>
					</table>

					{/* Pagination controls */}
					<div className="join pt-5">
						<button
							onClick={() => setCurrentPage(currentPage - 1)}
							disabled={currentPage === 1}
							className="join-item btn w-28"
						>
							Previous
						</button>

						{appointments &&
							[
								...Array(
									Math.ceil(
										appointments.length / StudentsPerPage
									)
								),
							].map((_, index) => (
								<button
									key={index}
									className={`join-item btn ${
										currentPage === index + 1
											? "btn-active"
											: ""
									}`}
									onClick={() => setCurrentPage(index + 1)}
								>
									{index + 1}
								</button>
							))}

						<button
							onClick={() => setCurrentPage(currentPage + 1)}
							disabled={StudentsPerPage > appointments.length}
							className="join-item btn w-28"
						>
							Next
						</button>
					</div>
				</div>
			</div>

			{/* modals */}
			{deleteModal && (
				<ModalDelete
					setDeleteModal={setDeleteModal}
					handleDelete={handleDelete}
				></ModalDelete>
			)}

			{studentModal && (
				<ModalAppointmentInfo
					setStudentModal={setStudentModal}
					selectedID={selectedID}
					appointments={appointments}

					// TO BE ADDED
					// handleRescedule={handleReschedule}
					// handleUpdateStatus={handleUpdateStatus}
				></ModalAppointmentInfo>
			)}
		</div>
	);
}

```

// File: app\login\page.jsx
```
"use client";
import Load from "@/components/Load";
import { Navbar } from "@/components/ui/landing/LandingNav";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession, parseJwt } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

// utils
import FullButton from "@/components/ui/buttons/FullButton";
import HollowButton from "@/components/ui/buttons/HollowButton";
import TextInput from "@/components/ui/inputs/TextInput";

// modals
import ModalForgotPassword from "@/components/ui/modals/ForgotPassword/ModalForgotPassword";

const Login = () => {
	const userSession = getUserSession();
	const router = useRouter();

	const [showInvalidCredentials, setShowInvalidCredentials] = useState(false);
	const [email, setEmail] = useState("");
	const [password, setPassword] = useState("");
	const [isLoading, setIsLoading] = useState(false);

	// forgot password
	const [forgotPasswordEmail, setForgotPasswordEmail] = useState("");
	const [showForgotPasswordModal, setShowForgotPasswordModal] = useState(false);

	/* HANDLING UNAUTHENTICATED USERS */
	if (userSession && userSession.role) return <Load route={userSession.role} />;

	useEffect(() => {
		if (isLoading) {
			const token = Cookies.get("token");
			const user = parseJwt(token);

			const { id, sub, image, role } = user;
			const userData = { id: id, email: sub, image: image, role: role };
			Cookies.set("user", JSON.stringify(userData));

			if (user) {
				router.push(`/${user.role}`);
			}
		}
	}, [isLoading]);

	const handleLogin = async (e) => {
		e.preventDefault();

		try {
			const result = await fetch(`${process.env.BASE_URL}${API_ENDPOINT.LOGIN}`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					institutionalEmail: email,
					password,
				}),
			});

			if (result.ok) {
				const data = await result.json();

				Cookies.set("token", data.token);
				setIsLoading(true);
			} else {
				alert("Invalid email or password. Try again.");
				setShowInvalidCredentials(true);
				setTimeout(() => {
					setShowInvalidCredentials(false);
					setIsLoading(false);
				}, 5000);
			}
		} catch (error) {
			console.error("Login error:", error.message);
		}
	};

	// const handleLogin = async (e) => {
	//   e.preventDefault();

	//   try {
	//     const result = await signIn("credentials", {
	//       redirect: false,
	//       email,
	//       password,
	//     });

	//     if (result.ok) {
	//       console.log("Login successful:", result);
	//     } else {
	//       console.error("Login error: inside", error.message);
	//     }
	//   } catch (error) {
	//     console.error("Login error:", error.message);
	//   }

	//   setShowInvalidCredentials(true);
	//   // Hide the message after 5 seconds
	//   setTimeout(() => {
	//     setShowInvalidCredentials(false);
	//   }, 5000);
	// };

	const handleCreateAccount = async (e) => {
		e.preventDefault();
		router.push("/registration");
	};

	return (
		<section className="ezy__signup10 py-24 md:py-28 dark:bg-[#0b1727] text-zinc-900 dark:text-white flex justify-center items-center min-h-screen">
			<div
				className="pattern-overlay pattern-left absolute top-0 left-0 -z-10"
				style={{ transform: "scaleY(-1)", top: "-50px" }}
			>
				<img src="/images/landing/lleft.png" alt="pattern" />
			</div>
			<div
				className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
				style={{ transform: "scaleY(-1)", top: "-15px" }}
			>
				<img
					src="/images/landing/lright.png"
					alt="pattern"
					className="w-full h-full object-contain"
				/>
			</div>

			<div className="container px-12 mx-auto">
				{/* navigation bar */}
				<Navbar userType="landing" />
				<div className="grid grid-cols-6 gap-6 h-full">
					<div className="col-span-6 md:col-span-2 lg:col-span-3">
						<div
							className="bg-cover bg-center ml-40 bg-no-repeat h-[80vh] rounded-xl hidden md:block w-[70%] md:w-[150%] lg:w-[130%]"
							style={{
								backgroundImage:
									"url(https://cdn.easyfrontend.com/pictures/sign-in-up/sign2.jpg)",
							}}
						></div>
					</div>
					<div className="col-span-6 md:col-span-4 lg:col-span-3 py-32">
						<div className="max-w-lg w-full h-full mx-auto px-0 md:px-8 lg:px-8">
							<div className="bg-white border border-gray-200 dark:bg-slate-800 shadow-xl rounded-2xl p-12 md:p-12 lg:py-10">
								<h2 className=" font-Merriweather dark:text-white text-2xl font-bold mb-3">
									Welcome to{" "}
									<span style={{ color: "#6B9080" }} className="px-1 rounded">
										WellTalk!
									</span>
								</h2>
								{/* login form */}
								<form className="w-full flex flex-col py-4" onSubmit={handleLogin}>
									{/* error message */}
									{showInvalidCredentials && (
										<div className="text-red-500 font-bold text-base pt-2 pb-1.5">
											Invalid email or password. Try Again.
										</div>
									)}

									{/* form inputs */}
									<div className="flex flex-col gap-y-3 pb-8">
										<TextInput
											label="Email Address"
											value={email}
											onChange={(e) => setEmail(e.target.value)}
											type="email"
											className="w-full"
										/>
										<TextInput
											label="Password"
											value={password}
											onChange={(e) => setPassword(e.target.value)}
											type="password"
											className="w-full"
										/>
									</div>

									{/* buttons */}
									<div className="w-full flex flex-row gap-x-4 pb-1">
										<FullButton className="w-1/2" onClick={handleLogin}>
											Sign In
										</FullButton>
									</div>

									{/* forgot password */}
									<div className="flex justify-center items-center">
										<div
											className="text-[#6B9080] text-md font-Jaldi  hover:text-green-800 cursor-pointer"
											onClick={(e) => setShowForgotPasswordModal(true)}
										>
											Forgot your Password?
										</div>
									</div>
									<div className="relative">
										<hr className="my-8 border-t border-gray-300" />
										<span className="px-2 text-sm absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-slate-800">
											Or
										</span>
									</div>
									<div className="w-full flex flex-row gap-x-4 pb-2">
										<HollowButton
											className="w-1/2"
											onClick={handleCreateAccount}
										>
											Create Account
										</HollowButton>
									</div>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
			{/* forgot password modal */}
			{showForgotPasswordModal && (
				<ModalForgotPassword
					setShowForgotPasswordModal={setShowForgotPasswordModal}
					forgotPasswordEmail={forgotPasswordEmail}
					setForgotPasswordEmail={setForgotPasswordEmail}
				/>
			)}
		</section>
	);
};

export default Login;

```

// File: app\profile\page.jsx
```
"use client";
import { Navbar } from "@/components/ui/Navbar";
import { useEffect, useState } from "react";
import { getUserSession } from "@/lib/helperFunctions";
import PostCard from "@/components/ui/PostsCard";

const CounselorProfile = () => {
	const [counselor, setCounselor] = useState(null);
	const [posts, setPosts] = useState([]);
    const userSession = getUserSession();

	useEffect(() => {
		// Dummy data for counselor
		const dummyCounselor = {
			avatarUrl: "https://via.placeholder.com/150",
			email: "counselor@example.com",
			id: "123456",
			name: "John Doe",
		};

		// Dummy data for posts
		const dummyPosts = [
			{
				id: "1",
				title: "First Post",
				content: "This is the content of the first post.",
				author: {
					image: "https://via.placeholder.com/150",
					firstName: "John",
					lastName: "Doe",
					institutionalEmail: "john.doe@example.com",
				},
				postDate: "2024-05-28",
				postTime: "14:00:00",
				postContent: "This is the content of the first post.",
				postImage: "https://via.placeholder.com/300",
			},
			{
				id: "2",
				title: "Second Post",
				content: "This is the content of the second post.",
				author: {
					image: "https://via.placeholder.com/150",
					firstName: "John",
					lastName: "Doe",
					institutionalEmail: "john.doe@example.com",
				},
				postDate: "2024-05-29",
				postTime: "15:00:00",
				postContent: "This is the content of the second post.",
				postImage: "https://via.placeholder.com/300",
			},
			{
				id: "3",
				title: "Third Post",
				content: "This is the content of the third post.",
				author: {
					image: "https://via.placeholder.com/150",
					firstName: "John",
					lastName: "Doe",
					institutionalEmail: "john.doe@example.com",
				},
				postDate: "2024-05-30",
				postTime: "16:00:00",
				postContent: "This is the content of the third post.",
				postImage: "https://via.placeholder.com/300",
			},
		];

		setCounselor(dummyCounselor);
		setPosts(dummyPosts);
	}, []);

	if (!counselor) return <div>Loading...</div>;

	return (
		<div className="p-4 mt-16 md:p-12">
			<section>
				<Navbar userType="student" />
			</section>
            <div
					className="pattern-overlay pattern-left absolute -z-10"
					style={{ transform: "scaleY(-1)", top: "-50px" }}>
					<img
						src="/images/landing/lleft.png"
						alt="pattern"
					/>
				</div>
				<div
					className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
					style={{ transform: "scaleY(-1)", top: "-15px" }}>
					<img
						src="/images/landing/lright.png"
						alt="pattern"
						className="w-full h-full object-contain"
					/>
				</div>
			<div className="w-full rounded-xl pt-4 md:mt-6 p-4 md:p-8 flex flex-col justify-center items-center mt-20 md:mt-16">
			
			<div className="bg-white dark:bg-slate-800 shadow-xl border border-slate-200 border-2 rounded-xl hover:-translate-y-1 duration-500 h-full w-full lg:w-7/12 p-6 lg:p-8 relative">
    <section className="flex flex-col md:flex-col items-center md:gap-4 mb-8 justify-center items-center w-full">
        {/* Avatar */}
        <div className="w-full flex justify-center avatar absolute -top-16 md:-top-24">
            <div className="w-32 md:w-48 rounded-full ring ring-[#6B9080] ring-offset-base-100 ring-offset-1">
                <img src={userSession?.image} />
            </div>
        </div>
        {/* User Info */}
        <div className="w-full mt-14 md:mt-20 flex flex-col justify-center items-center md:justify-start">
            <h1 className="font-Merriweather text-2xl md:text-2xl lg:text-4xl font-bold tracking-tight mt-4">
                {counselor.name}
            </h1>
            <p className="font-Merriweather tracking-tight font-thin my-2">
                {counselor.email}
            </p>
            <p className="font-Merriweather tracking-tight font-thin ">
                {counselor.id}
            </p>
        </div>
    </section>

          
          <div className="border-l border-slate-100 h-full mx-4 md:mx-8 lg:mx-12"></div>

					<section className="flex flex-col gap-6 mt-2 w-full">
						{/* Posts */}
						<div className="w-full">
							<h1 className="font-Merriweather text-slate-600 text-xl md:text-2xl font-semibold tracking-tight py-4">
								Posts by {counselor.name}
							</h1>
							{posts.map((post) => (
								<PostCard key={post.id} post={post} />
							))}
						</div>
					</section>
				</div>
			</div>
		</div>
	);
};

export default CounselorProfile;

```

// File: app\registration\page.jsx
```
"use client";

import FullButton from "@/components/ui/buttons/FullButton";
import TextInput from "@/components/ui/inputs/TextInput";
import { Navbar } from "@/components/ui/landing/LandingNav";
import ModalRegistrationSuccessful from "@/components/ui/modals/ModalRegistrationSuccessful";
import ModalTermsUnchecked from "@/components/ui/modals/ModalTermsUnchecked";
import {
  collegeOptions,
  genderOptions,
  programOptions,
} from "@/lib/inputOptions";
import {
  registrationSchema,
  studentSchema,
  teacherSchema,
} from "@/lib/validators";
import { useRouter } from "next/navigation";
import { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { API_ENDPOINT } from "@/lib/api";
import Load from "@/components/Load";
import { getUserSession } from "@/lib/helperFunctions";
import { faCity } from "@fortawesome/free-solid-svg-icons";

const Registration = () => {
  const router = useRouter();

  // properties
  const [email, setEmail] = useState("");
  const [idno, setIdNo] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [gender, setGender] = useState("");

  const [birthdate, setBirthdate] = useState("");
  const [contactNumber, setContactNumber] = useState("");
  const [specificAddress, setSpecificAddress] = useState("");
  const [barangay, setBarangay] = useState("");
  const [cityMunicipality, setCityMunicipality] = useState("");
  const [province, setProvince] = useState("");
  const [zipcode, setZipcode] = useState("");

  const [role, setRole] = useState("");
  const [roleStudent, setRoleStudent] = useState(false);
  const [roleTeacher, setRoleTeacher] = useState(false);
  const [roleCounselor, setRoleCounselor] = useState(false);

  const [college, setCollege] = useState("");
  const [program, setProgram] = useState("");
  const [year, setYear] = useState("");
  const [password, setPassword] = useState("");
  const [passwordCheck, setPasswordCheck] = useState("");
  const [isValidPassword, setIsValidPassword] = useState(true);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [errors, setErrors] = useState({});
  const [showTermsNotAccepted, setShowTermsNotAccepted] = useState(false);
  const [showRegistrationSuccessful, setShowRegistrationSuccessful] =
    useState(false);
  const [isEmptyError, setIsEmptyError] = useState(false);
  const [isMismatchError, setIsMismatchError] = useState(false);

  // handling route protection
  const userSession = getUserSession();
  if (userSession && userSession.role) return <Load route={userSession.role} />;

  const handleTermsChange = (e) => {
    setTermsAccepted(e.target.checked);
  };

  // create account
  const handleCreateAccount = async (e) => {
    e.preventDefault();

    const clearErrors = () => {
      setTimeout(() => {
        setErrors({});
      }, 3000);
    };

    let result;
    result = registrationSchema.safeParse({
      email,
      idno,
      firstName,
      lastName,
      gender,
      role,
      password,
      passwordCheck,
      termsAccepted,
    });

    let extraInfoValidation;

    /* zod validation */
    if (role === "student") {
      const studentData = {
        birthdate,
        contactNumber,
        specificAddress,
        barangay,
        cityMunicipality,
        province,
        zipcode,
        college,
        program,
        year,
      };
      extraInfoValidation = studentSchema.safeParse(studentData);
    } else if (role === "teacher") {
      const teacherData = { college };
      extraInfoValidation = teacherSchema.safeParse(teacherData);
    } else if (role === "counselor") {
      result = registrationSchema.safeParse({
        email,
        idno,
        firstName,
        lastName,
        gender,
        role,
        password,
        passwordCheck,
        termsAccepted,
      });
    }

    if (!extraInfoValidation?.success && !result?.success) {
      setErrors({
        ...extraInfoValidation?.error.format(),
        ...result?.error.format(),
      });
      clearErrors();
      return;
    }

    if (termsAccepted === false) {
      setShowTermsNotAccepted(true);
      return;
    }

    /* user registration - {role} */
    let response;
    switch (role) {
      case "student":
        try {
          response = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.REGISTER_STUDENT}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                institutionalEmail: email,
                idNumber: idno,
                firstName: firstName,
                lastName: lastName,
                gender: gender,
                password: password,
                image: `https://ui-avatars.com/api/?name=${firstName}+${lastName}`,
                role: role,
                college: college,
                program: program,
                year: year,
                birthDate: birthdate,
                contactNumber: contactNumber,
                specificAddress: specificAddress,
                barangay: barangay,
                faCity: cityMunicipality,
                province: province,
                zipCode: zipcode,
              }),
            }
          );
        } catch (error) {
          console.log("Error in creating student user", error);
        }
        break;
      case "teacher":
        try {
          response = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.REGISTER_TEACHER}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                institutionalEmail: email,
                idNumber: idno,
                firstName: firstName,
                lastName: lastName,
                gender: gender,
                password: password,
                image: `https://ui-avatars.com/api/?name=${firstName}+${lastName}`,
                role: role,
                college: college,
              }),
            }
          );
        } catch (error) {
          console.log("Error in creating student user", error);
        }
        break;
      case "counselor":
        try {
          response = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.REGISTER_COUNSELOR}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                institutionalEmail: email,
                idNumber: idno,
                firstName: firstName,
                lastName: lastName,
                gender: gender,
                password: password,
                image: `https://ui-avatars.com/api/?name=${firstName}+${lastName}`,
                role: role,
              }),
            }
          );
        } catch (error) {
          console.log("Error in creating student user", error);
        }
        break;
    }

    console.log(response);

    if (!response.ok) console.log("Error status: ", response.status);
    else {
      setTimeout(() => {
        router.push("/login");
      }, 5000);
    }

    setShowRegistrationSuccessful(true);
  };

  // password validation function
  const validatePassword = (password) => {
    const regex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return regex.test(password);
  };

  const handlePasswordChange = (e) => {
    const newPassword = e.target.value;
    setPassword(newPassword);

    if (!validatePassword(newPassword)) {
      // password is not valid
      setIsValidPassword(false);
    } else {
      // password is valid
      setIsValidPassword(true);
    }
  };

  const handlePasswordCheck = (e) => {
    const newPasswordCheck = e.target.value;
    setPasswordCheck(newPasswordCheck);

    if (newPasswordCheck.trim() === "") {
      setIsEmptyError(true);
      setIsMismatchError(false);
    } else if (validatePassword(password)) {
      setIsEmptyError(false);
      if (newPasswordCheck !== password) {
        setIsMismatchError(true);
      } else {
        setIsMismatchError(false);
      }
    } else {
      setIsEmptyError(false);
      setIsMismatchError(false);
    }
  };

  const handleRoleChange = (e) => {
    const newRole = e.target.value;
    setRole(newRole);

    if (newRole === "student") {
      setRoleStudent(true);
      setRoleTeacher(false);
      setRoleCounselor(false);
    } else if (newRole === "teacher") {
      setRoleStudent(false);
      setRoleTeacher(true);
      setRoleCounselor(false);
    } else if (newRole === "counselor") {
      setRoleStudent(false);
      setRoleTeacher(false);
      setRoleCounselor(true);
    } else {
      setRoleStudent(false);
      setRoleTeacher(false);
      setRoleCounselor(false);
    }
  };

  const handleLoginClick = () => {
    router.push("/login");
  };

  return (
    <section className="ezy__signup7 py-2 md:py-2 text-zinc-900 dark:text-white">
      <Navbar userType="landing" />
      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>
      <div className="container px-4 mx-auto">
        <div className="grid grid-cols-2 gap-6 py-16 pl-24 lg:gap-x-16 justify-content-between h-full">
          <div className="col-span-3 lg:col-span-1">
            <div
              className="bg-cover bg-center bg-no-repeat h-[90vh] w-full rounded-2xl hidden lg:block"
              style={{
                backgroundImage:
                  "url(https://cdn.easyfrontend.com/pictures/sign-in-up/sign-in-up-2.png)",
              }}
            ></div>
          </div>
          <div className="flex items-center max-w-lg justify-center lg:justify-start h-full">
            <div className="w-full">
              <form
                className="h-full flex flex-col justify-center bg-white dark:bg-transparent"
                onSubmit={handleCreateAccount}
              >
                <p className="text-black text-5xl font-Merriweather dark:text-white">
                  Registration
                </p>
                <div className="flex flex-col gap-y-3 py-4">
                  <div className="w-full flex flex-row gap-x-6">
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="Institutional Email"
                        label="Institutional Email"
                        type="email"
                        id="email"
                      />
                      {errors.idno && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors?.email?._errors[0]}
                        </p>
                      )}
                    </div>
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={idno}
                        onChange={(e) => setIdNo(e.target.value)}
                        placeholder="ID Number"
                        label="ID Number"
                        type="text"
                        id="idno"
                      />
                      {errors.idno && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.idno._errors[0]}
                        </p>
                      )}
                    </div>
                  </div>

                  <div className="w-full flex flex-row gap-x-6">
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={firstName}
                        onChange={(e) => setFirstName(e.target.value)}
                        placeholder="First Name"
                        label="First Name"
                        type="text"
                        id="firstName"
                      />
                      {errors.firstName && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.firstName._errors[0]}
                        </p>
                      )}
                    </div>
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={lastName}
                        onChange={(e) => setLastName(e.target.value)}
                        placeholder="Last Name"
                        label="Last Name"
                        type="text"
                        id="lastName"
                      />
                      {errors.lastName && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.lastName._errors[0]}
                        </p>
                      )}
                    </div>
                    <div className="flex flex-col w-full">
                      <label
                        htmlFor="gender"
                        className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                      >
                        <select
                          value={gender}
                          onChange={(e) => setGender(e.target.value)}
                          placeholder="Gender"
                          className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full dark:text-black"
                          required
                        >
                          {genderOptions.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                          Gender
                        </span>
                      </label>
                      {errors.gender && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.gender._errors[0]}
                        </p>
                      )}
                    </div>
                  </div>
                  <div className="w-full flex flex-row gap-x-6">
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={password}
                        onChange={handlePasswordChange}
                        placeholder="Password"
                        label="Password"
                        type="password"
                        id="password"
                      />
                      {errors.password && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.password._errors[0]}
                        </p>
                      )}
                    </div>
                    <div className="flex flex-col w-full">
                      <TextInput
                        value={passwordCheck}
                        onChange={handlePasswordCheck}
                        placeholder="Confirm Password"
                        label="Confirm Password"
                        type="password"
                        id="passwordCheck"
                      />
                      {isEmptyError && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          Please confirm password
                        </p>
                      )}
                      {isMismatchError && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          Passwords do not match
                        </p>
                      )}
                    </div>
                  </div>
                  <div className="flex flex-col w-full">
                    <label
                      htmlFor="gender"
                      className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                    >
                      <select
                        value={role}
                        onChange={handleRoleChange}
                        className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full dark:text-black"
                        required
                      >
                        <option value="">Select</option>
                        <option value="student">Student</option>
                        <option value="teacher">Teacher</option>
                        <option value="counselor">Counselor</option>
                      </select>
                      <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                        Role
                      </span>
                    </label>
                    {errors.role && (
                      <p className="text-red-500 text-sm font-Jaldi font-semibold">
                        {errors.role._errors[0]}
                      </p>
                    )}
                  </div>
                  {/* Conditionally Rendered Fields */}
                  {role === "student" && (
                    <>
                      <div className="flex flex-col w-full">
                        <label
                          htmlFor="birthdate"
                          className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                        >
                          <DatePicker
                            selected={birthdate}
                            onChange={(date) => setBirthdate(date)}
                            className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full dark:text-black"
                            showMonthDropdown
                            showYearDropdown
                            dropdownMode="select"
                            locale="en-GB"
                            maxDate={new Date()}
                            required
                          />
                          <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                            Birthdate
                          </span>
                        </label>
                        {errors.birthdate && (
                          <p className="text-red-500 text-sm font-Jaldi font-semibold">
                            {errors.birthdate._errors[0]}
                          </p>
                        )}
                      </div>

                      <div className="w-full flex flex-row gap-x-6">
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={contactNumber}
                            onChange={(e) => setContactNumber(e.target.value)}
                            placeholder="Contact Number"
                            label="Contact Number"
                            type="tel"
                            id="contactNumber"
                          />
                          {errors.contactNumber && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.contactNumber._errors[0]}
                            </p>
                          )}
                        </div>
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={specificAddress}
                            onChange={(e) => setSpecificAddress(e.target.value)}
                            placeholder="Specific Address"
                            label="Specific Address"
                            type="text"
                            id="specificAddress"
                          />
                          {errors.specificAddress && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.specificAddress._errors[0]}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="w-full flex flex-row gap-x-6">
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={barangay}
                            onChange={(e) => setBarangay(e.target.value)}
                            placeholder="Barangay"
                            label="Barangay"
                            type="text"
                            id="barangay"
                          />
                          {errors.barangay && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.barangay._errors[0]}
                            </p>
                          )}
                        </div>
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={cityMunicipality}
                            onChange={(e) =>
                              setCityMunicipality(e.target.value)
                            }
                            placeholder="City/Municipality"
                            label="City/Municipality"
                            type="text"
                            id="cityMunicipality"
                          />
                          {errors.cityMunicipality && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.cityMunicipality._errors[0]}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="w-full flex flex-row gap-x-6">
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={province}
                            onChange={(e) => setProvince(e.target.value)}
                            placeholder="Province"
                            label="Province"
                            type="text"
                            id="province"
                          />
                          {errors.province && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.province._errors[0]}
                            </p>
                          )}
                        </div>
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={zipcode}
                            onChange={(e) => setZipcode(e.target.value)}
                            placeholder="Zipcode"
                            label="Zipcode"
                            type="text"
                            id="zipcode"
                          />
                          {errors.zipcode && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.zipcode._errors[0]}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="w-full flex flex-row gap-x-6">
                        <div className="flex flex-col w-full">
                          <label
                            htmlFor="gender"
                            className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                          >
                            <select
                              value={college}
                              onChange={(e) => setCollege(e.target.value)}
                              className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full dark:text-black"
                              required
                            >
                              {collegeOptions.map((option) => (
                                <option key={option.value} value={option.value}>
                                  {option.label}
                                </option>
                              ))}
                            </select>
                            <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                              Department
                            </span>
                          </label>
                          {errors.college && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.college._errors[0]}
                            </p>
                          )}
                        </div>
                        <div className="flex flex-col w-full">
                          <label
                            htmlFor="gender"
                            className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                          >
                            <select
                              value={program}
                              onChange={(e) => setProgram(e.target.value)}
                              className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full dark:text-black"
                              required
                            >
                              {programOptions[college]?.map((option) => (
                                <option key={option.value} value={option.value}>
                                  {option.label}
                                </option>
                              ))}
                            </select>
                            <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                              Course
                            </span>
                          </label>
                          {errors.program && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.program._errors[0]}
                            </p>
                          )}
                        </div>
                        <div className="flex flex-col w-full">
                          <TextInput
                            value={year}
                            onChange={(e) => setYear(e.target.value)}
                            placeholder="Year"
                            label="Year"
                            type="text"
                            id="year"
                          />
                          {errors.year && (
                            <p className="text-red-500 text-sm font-Jaldi font-semibold">
                              {errors.year._errors[0]}
                            </p>
                          )}
                        </div>
                      </div>
                    </>
                  )}

                  {role === "teacher" && (
                    <div className="flex flex-col w-full">
                      <label
                        htmlFor="gender"
                        className="relative block rounded-md bg-white border border-gray-400 p-1 shadow-sm focus-within:border-black focus-within:ring-1 focus-within:ring-black w-full"
                      >
                        <select
                          value={college}
                          onChange={(e) => setCollege(e.target.value)}
                          className="peer border-none bg-white placeholder-white focus:border-gray-800 focus:outline-none focus:ring-0 rounded-md w-full"
                          required
                        >
                          {collegeOptions.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        <span className="pointer-events-none absolute start-2.5 bg-white top-0 -translate-y-1/2 p-1 text-xs transition-all peer-placeholder-shown:top-1/2 peer-placeholder-shown:text-sm peer-focus:top-0 peer-focus:text-xs">
                          Department
                        </span>
                      </label>
                      {errors.college && (
                        <p className="text-red-500 text-sm font-Jaldi font-semibold">
                          {errors.college._errors[0]}
                        </p>
                      )}
                    </div>
                  )}
                  <div className="w-full flex items-center gap-x-2 py-4">
                    <input
                      type="checkbox"
                      checked={termsAccepted}
                      onChange={handleTermsChange}
                      disabled={!role}
                      className="h-4 w-4 text-black focus:ring-black border-gray-300 rounded"
                    />
                    <label className="text-sm font-bold text-gray-700">
                      I accept the{" "}
                      <a
                        href="/terms"
                        className="hover:underline"
                        style={{ color: "#6B9080" }}
                      >
                        terms and conditions
                      </a>
                    </label>
                  </div>

                  <div className="flex flex-row gap-4 w-full">
                    <div className="w-full mt-7">
                      <p>
                        Already have an account?{" "}
                        <span
                          className="cursor-pointer font-bold"
                          style={{ color: "#6B9080" }}
                          onClick={handleLoginClick}
                        >
                          Log In
                        </span>
                      </p>
                    </div>
                    <div className="flex flex-col w-full">
                      <FullButton onClick={handleCreateAccount}>
                        Create Account
                      </FullButton>
                    </div>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>

        {showTermsNotAccepted && (
          <ModalTermsUnchecked
            setShowTermsNotAccepted={setShowTermsNotAccepted}
          />
        )}
        {/* terms and conditions not accepted */}

        {showRegistrationSuccessful && (
          <ModalRegistrationSuccessful
            setShowRegistrationSuccessful={setShowRegistrationSuccessful}
            //  to be deleted

            handleLoginClick={handleLoginClick}
          />
        )}
      </div>
    </section>
  );
};

export default Registration;

// "use client";

// import registrationBg from "@/public/images/bgs/registrationBg.png";
// import { useRouter } from "next/navigation";
// import { useState } from "react";

// // utils
// import FullButton from "@/components/ui/buttons/FullButton";
// import InputCollege from "@/components/ui/inputs/InputCollege";
// import InputCollegeInformation from "@/components/ui/inputs/InputCollegeInformation";
// import InputInstitutionalInfo from "@/components/ui/inputs/InputInstitutionalInfo";
// import InputName from "@/components/ui/inputs/InputName";
// import InputPassword from "@/components/ui/inputs/InputPassword";
// import PersonalInfo from "@/components/ui/inputs/InputPersonalInfo";
// import InputRole from "@/components/ui/inputs/InputRole";
// import { Navbar } from "@/components/ui/landing/LandingNav";
// import ModalRegistrationSuccessful from "@/components/ui/modals/ModalRegistrationSuccessful";
// import ModalTermsUnchecked from "@/components/ui/modals/ModalTermsUnchecked";

// const Registration = () => {
// 	const router = useRouter();

// 	// properties
// 	const [email, setEmail] = useState("");
// 	const [idno, setIdNo] = useState("");
// 	const [firstName, setFirstName] = useState("");
// 	const [lastName, setLastName] = useState("");
// 	const [gender, setGender] = useState("");

// 	const [birthdate, setBirthdate] = useState("");
// 	const [contactNumber, setContactNumber] = useState("");
// 	const [address, setAddress] = useState("");

// 	const [role, setRole] = useState("");
// 	const [roleStudent, setRoleStudent] = useState(false);
// 	const [roleTeacher, setRoleTeacher] = useState(false);
// 	const [roleCounselor, setRoleCounselor] = useState(false);

// 	const [college, setCollege] = useState("");
// 	const [program, setProgram] = useState("");
// 	const [year, setYear] = useState("");
// 	const [password, setPassword] = useState("");
// 	const [passwordCheck, setPasswordCheck] = useState("");
// 	const [termsAccepted, setTermsAccepted] = useState(false);

// 	const handleTermsChange = (e) => {
// 		setTermsAccepted(e.target.checked);
// 	};

// 	// pop ups
// 	const [showInvalidPassword, setShowInvalidPassword] = useState(false);
// 	const [showPasswordDoNotMatch, setShowPasswordDoNotMatch] = useState(false);

// 	// modal
// 	const [showTermsNotAccepted, setShowTermsNotAccepted] = useState(false);
// 	const [showRegistrationSuccessful, setShowRegistrationSuccessful] =
// 		useState(false);

// 	// create account
// 	const handleCreateAccount = async (e) => {
// 		e.preventDefault();

// 		if (roleStudent) {
// 			if (
// 				email.trim() === "" ||
// 				idno.trim() === "" ||
// 				firstName.trim() === "" ||
// 				lastName.trim() === "" ||
// 				gender.trim() === "" ||
// 				birthdate.trim() === "" ||
// 				contactNumber.trim() === "" ||
// 				address.trim() === "" ||
// 				college.trim() === "" ||
// 				program.trim() === "" ||
// 				year.trim() === "" ||
// 				password.trim() === "" ||
// 				passwordCheck.trim() === "" ||
// 				!termsAccepted
// 			) {
// 				// Show error message or handle appropriately
// 				alert("Please fill out all required fields.");
// 				return;
// 			}
// 		}
// 		if (roleTeacher) {
// 			if (
// 				email.trim() === "" ||
// 				idno.trim() === "" ||
// 				firstName.trim() === "" ||
// 				lastName.trim() === "" ||
// 				gender.trim() === "" ||
// 				college.trim() === "" ||
// 				password.trim() === "" ||
// 				passwordCheck.trim() === "" ||
// 				!termsAccepted
// 			) {
// 				// Show error message or handle appropriately
// 				alert("Please fill out all required fields.");
// 				return;
// 			}
// 		}
// 		if (roleCounselor) {
// 			if (
// 				email.trim() === "" ||
// 				idno.trim() === "" ||
// 				firstName.trim() === "" ||
// 				lastName.trim() === "" ||
// 				gender.trim() === "" ||
// 				password.trim() === "" ||
// 				passwordCheck.trim() === "" ||
// 				!termsAccepted
// 			) {
// 				// Show error message or handle appropriately
// 				alert("Please fill out all required fields.");
// 				return;
// 			}
// 		}

// 		if (termsAccepted === false) {
// 			setShowTermsNotAccepted(true);
// 			return;
// 		}

// 		let role;

// 		if (roleStudent) {
// 			role = "student";
// 		} else if (roleTeacher) {
// 			role = "teacher";
// 		} else if (roleCounselor) {
// 			role = "counselor";
// 		}

// 		//
// 		try {
// 			const response = await fetch("/api/users/createuser", {
// 				method: "POST",
// 				headers: {
// 					"Content-Type": "application/json",
// 				},
// 				body: JSON.stringify({
// 					institutionalEmail: email,
// 					idNumber: idno,
// 					firstName: firstName,
// 					lastName: lastName,
// 					gender: gender,
// 					password: password,
// 					gender: gender,
// 					image: `https://ui-avatars.com/api/?name=${firstName}+${lastName}`,
// 					birthDate: birthdate,
// 					contactNumber: contactNumber,
// 					address: address,
// 					college: college,
// 					program: program,
// 					year: year,
// 					role: role,
// 				}),
// 			});

// 			if (!response.ok) {
// 				console.log("Error status: ", response.status);
// 			}
// 			setTimeout(() => {
// 				router.push("/login");
// 			}, 5000);
// 		} catch (error) {
// 			console.log("Error in creating user", error);
// 		}

// 		// successful registration
// 		setShowRegistrationSuccessful(true);
// 	};

// 	// password validation function
// 	const validatePassword = (password) => {
// 		const regex =
// 			/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
// 		return regex.test(password);
// 	};

// 	const handlePasswordChange = (e) => {
// 		const newPassword = e.target.value;
// 		setPassword(newPassword);

// 		if (!validatePassword(newPassword)) {
// 			// password is not valid
// 			setShowInvalidPassword(true);
// 		} else {
// 			// password is valid
// 			setShowInvalidPassword(false);
// 		}
// 	};

// 	const handlePasswordCheck = (e) => {
// 		const newPasswordCheck = e.target.value;
// 		setPasswordCheck(newPasswordCheck);

// 		if (newPasswordCheck.trim() === "") {
// 			// password is empty
// 			setShowPasswordDoNotMatch(false);
// 		} else if (validatePassword(password)) {
// 			// password is valid
// 			if (newPasswordCheck !== password) {
// 				// passwords do not match
// 				setShowPasswordDoNotMatch(true);
// 			} else {
// 				// passwords match
// 				setShowPasswordDoNotMatch(false);
// 			}
// 		} else {
// 			// default
// 			setShowPasswordDoNotMatch(false);
// 		}
// 	};

// 	const handleRoleChange = (e) => {
// 		const newRole = e.target.value;
// 		setRole(newRole);

// 		console.log(newRole);
// 		if (newRole === "student") {
// 			setRoleStudent(true);
// 			setRoleTeacher(false);
// 			setRoleCounselor(false);
// 		} else if (newRole === "teacher") {
// 			setRoleStudent(false);
// 			setRoleTeacher(true);
// 			setRoleCounselor(false);
// 		} else if (newRole === "counselor") {
// 			setRoleStudent(false);
// 			setRoleTeacher(false);
// 			setRoleCounselor(true);
// 		} else {
// 			setRoleStudent(false);
// 			setRoleTeacher(false);
// 			setRoleCounselor(false);
// 		}
// 	};

// 	const handleLoginClick = () => {
// 		router.push("/login");
// 	};

// 	return (
// 		<div
// 			className="min-h-screen w-full"
// 			style={{
// 				backgroundImage: `url(${registrationBg.src})`,
// 				backgroundSize: "cover",
// 				backgroundPosition: "center right",
// 				backgroundAttachment: "fixed",
// 				minHeight: "100vh",
// 			}}>
// 			{/* navigation bar */}
// 			<Navbar userType="landing" />

// 			{/* main content */}
// 			<div>
// 				{/* registration form*/}
// 				<div className="flex justify-start items-center py-32 px-36 flex-row">
// 					<div className="w-4/12"></div> {/* empty div for spacing */}
// 					<div className="w-8/12 h-fit pr-2.5 ">
// 						<form
// 							className="h-full flex flex-col justify-center"
// 							onSubmit={() => {}}>
// 							<p className="text-black text-5xl font-Merriweather pt-5">
// 								Registration
// 							</p>
// 							{/* form inputs */}
// 							<div className="flex flex-col gap-y-2.5 py-4">
// 								<div className="w-full flex flex-row gap-x-6">
// 									<InputInstitutionalInfo
// 										email={email}
// 										setEmail={setEmail}
// 										idno={idno}
// 										setIdNo={setIdNo}
// 									/>
// 								</div>
// 								<div className="w-full flex flex-row gap-x-6">
// 									<InputName
// 										firstName={firstName}
// 										setFirstName={setFirstName}
// 										lastName={lastName}
// 										setLastName={setLastName}
// 										gender={gender}
// 										setGender={setGender}
// 									/>
// 								</div>
// 								<div className="w-full flex flex-row gap-x-6">
// 									<InputPassword
// 										password={password}
// 										passwordCheck={passwordCheck}
// 										showInvalidPassword={
// 											showInvalidPassword
// 										}
// 										showPasswordDoNotMatch={
// 											showPasswordDoNotMatch
// 										}
// 										handlePasswordChange={
// 											handlePasswordChange
// 										}
// 										handlePasswordCheck={
// 											handlePasswordCheck
// 										}
// 									/>
// 								</div>

// 								{/* choose role */}
// 								<div className="flex flex-col">
// 									<div className="w-1/3 flex flex-row gap-x-6 pt-2">
// 										<div className="w-full">
// 											<InputRole
// 												role={role}
// 												setRole={setRole}
// 												handleRoleChange={
// 													handleRoleChange
// 												}
// 											/>
// 										</div>
// 									</div>
// 								</div>

// 								{/* role === student */}
// 								{roleStudent && (
// 									<>
// 										<div className="w-full flex flex-row gap-x-6">
// 											<PersonalInfo
// 												birthdate={birthdate}
// 												setBirthdate={setBirthdate}
// 												contactNumber={contactNumber}
// 												setContactNumber={
// 													setContactNumber
// 												}
// 												address={address}
// 												setAddress={setAddress}
// 											/>
// 										</div>
// 										<div className="flex flex-col">
// 											<div className="w-full flex flex-row gap-x-6">
// 												<InputCollegeInformation
// 													college={college}
// 													setCollege={setCollege}
// 													program={program}
// 													setProgram={setProgram}
// 													year={year}
// 													setYear={setYear}
// 												/>
// 											</div>
// 										</div>
// 									</>
// 								)}

// 								{/* role === teacher */}
// 								{roleTeacher && (
// 									<>
// 										<div className="flex flex-col">
// 											<div className="w-3/5 flex flex-row gap-x-6">
// 												<InputCollege
// 													college={college}
// 													setCollege={setCollege}
// 												/>
// 											</div>
// 										</div>
// 									</>
// 								)}

// 								{/* role === counselor */}
// 								{roleTeacher && <></>}
// 							</div>

// 							<div className="w-full flex flex-row gap-x-3 py-6 pb-1.5 items-center">
// 								<input
// 									type="checkbox"
// 									checked={termsAccepted}
// 									onChange={handleTermsChange}
// 									className="h-5 w-5"
// 									required
// 								/>
// 								<label
// 									htmlFor="terms"
// 									className="font-Jaldi text-lg">
// 									I agree to the Terms and Conditions
// 								</label>
// 							</div>

// 							<div className="w-full h-14 flex flex-row my-6">
// 								<div className="w-2/3 h-full"></div>
// 								<div className="w-1/3 h-full flex justify-center items-center">
// 									<FullButton onClick={handleCreateAccount}>
// 										Create Account
// 									</FullButton>
// 								</div>
// 							</div>
// 						</form>
// 					</div>
// 				</div>
// 			</div>

// 			{/* terms and conditions not accepted */}
// {showTermsNotAccepted && (
// 	<ModalTermsUnchecked
// 		setShowTermsNotAccepted={setShowTermsNotAccepted}
// 	/>
// )}
// {/* terms and conditions not accepted */}

// {showRegistrationSuccessful && (
// 	<ModalRegistrationSuccessful
// 		setShowRegistrationSuccessful={
// 			setShowRegistrationSuccessful
// 		}
// 					//  to be deleted

// 					handleLoginClick={handleLoginClick}
// 				/>
// 			)}
// 		</div>
// 	);
// };

// export default Registration;

// const Registration = () => {
//   const [formData, setFormData] = useState({
//     email: "",
//     password: "",
//   });

//   const handleFormChange = (e) => {
//     setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
//   };

//   const handleFormSubmit = async (e) => {
//     e.preventDefault();

//     try {
//       // Hash the password
//       const response = await fetch("/api/register", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({
//           email: formData.email,
//           password: formData.password,
//         }),
//       });

//       const data = await response.json();
//       console.log(data);
//     } catch (error) {
//       console.error("Error:", error);
//     }
//   };
//   return (
//     <div className="w-full h-screen flex flex-col items-center justify-center">
//       <h1 className="text-2xl font-bold mb-5">Registration</h1>

//       <form onSubmit={handleFormSubmit} action="POST">
//         <div className="flex flex-col">
//           <div>
//             <label htmlFor="email">Email: </label>
//             <input
//               type="email"
//               name="email"
//               value={formData.email}
//               onChange={handleFormChange}
//               placeholder="Email"
//               required
//             />
//           </div>
//           <div>
//             <label htmlFor="password">Password: </label>
//             <input
//               type="password"
//               name="password"
//               value={formData.password}
//               onChange={handleFormChange}
//               placeholder="Password"
//               required
//             />
//           </div>
//           <button>Register</button>
//         </div>
//       </form>
//     </div>
//   );
// };

// export default Registration;

// import React, { useEffect, useState } from "react";
// import Link from "next/link";
// import { useRouter } from "next/navigation";
// import { useSession } from "next-auth/react";
// import Image from "next/image";

// const RegisterPage = () => {
//   const [error, setError] = useState("");
//   const router = useRouter();
//   const { data: session, status: sessionStatus } = useSession();

//   useEffect(() => {
//     if (sessionStatus === "authenticated") {
//       router.replace("/teacher");
//     }
//   }, [sessionStatus, router]);

//   const isValidEmail = (email) => {
//     const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
//     return emailRegex.test(email);
//   };
//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const email = e.target[0].value;
//     const password = e.target[1].value;
//     const confirmPassword = e.target[2].value;

//     if (!isValidEmail(email)) {
//       setError("Email is invalid");

//       return;
//     }

//     if (!password || password.length < 8) {
//       setError("Password is invalid");

//       return;
//     }

//     if (confirmPassword !== password) {
//       setError("Passwords are not equal");

//       return;
//     }

//     try {
//       const res = await fetch("/api/register", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify({
//           email,
//           password,
//         }),
//       });
//       if (res.status === 400) {
//         setError("The email already in use");
//       }
//       if (res.status === 200) {
//         setError("");

//         router.push("/login");
//       }
//     } catch (error) {
//       setError("Error, try again");
//       console.log(error);
//     }
//   };

//   if (sessionStatus === "loading") {
//     return <h1>Loading...</h1>;
//   }
//   return (
//     sessionStatus !== "authenticated" && (
//       <div className="flex min-h-full flex-1 flex-col justify-center py-12 sm:px-6 lg:px-8">
//         <div className="flex justify-center flex-col items-center">
//           <Image src="/logo 1.png" alt="star logo" width={50} height={50} />
//           <h2 className="mt-6 text-center text-2xl leading-9 tracking-tight text-gray-900">
//             Sign up on our website
//           </h2>
//         </div>

//         <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-[480px]">
//           <div className="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
//             <form className="space-y-6" onSubmit={handleSubmit}>
//               <div>
//                 <label
//                   htmlFor="email"
//                   className="block text-sm font-medium leading-6 text-gray-900"
//                 >
//                   Email address
//                 </label>
//                 <div className="mt-2">
//                   <input
//                     id="email"
//                     name="email"
//                     type="email"
//                     autoComplete="email"
//                     required
//                     className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
//                   />
//                 </div>
//               </div>

//               <div>
//                 <label
//                   htmlFor="password"
//                   className="block text-sm font-medium leading-6 text-gray-900"
//                 >
//                   Password
//                 </label>
//                 <div className="mt-2">
//                   <input
//                     id="password"
//                     name="password"
//                     type="password"
//                     autoComplete="current-password"
//                     required
//                     className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
//                   />
//                 </div>
//               </div>

//               <div>
//                 <label
//                   htmlFor="confirmpassword"
//                   className="block text-sm font-medium leading-6 text-gray-900"
//                 >
//                   Confirm password
//                 </label>
//                 <div className="mt-2">
//                   <input
//                     id="confirmpassword"
//                     name="confirmpassword"
//                     type="password"
//                     autoComplete="current-password"
//                     required
//                     className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
//                   />
//                 </div>
//               </div>

//               <div className="flex items-center justify-between">
//                 <div className="flex items-center">
//                   <input
//                     id="remember-me"
//                     name="remember-me"
//                     type="checkbox"
//                     className="h-4 w-4 rounded border-gray-300 text-black focus:ring-black"
//                   />
//                   <label
//                     htmlFor="remember-me"
//                     className="ml-3 block text-sm leading-6 text-gray-900"
//                   >
//                     Accept our terms and privacy policy
//                   </label>
//                 </div>
//               </div>

//               <div>
//                 <button
//                   type="submit"
//                   className="flex w-full border border-black justify-center rounded-md bg-black px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-white transition-colors hover:text-black focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
//                 >
//                   Sign up
//                 </button>
//                 <p className="text-red-600 text-center text-[16px] my-4">
//                   {error && error}
//                 </p>
//               </div>
//             </form>
//           </div>
//         </div>
//       </div>
//     )
//   );
// };

// export default RegisterPage;

```

// File: app\student\page.jsx
```
"use client";
import { default as Load, default as LoadingState } from "@/components/Load";
import Card from "@/components/ui/Card";
import Footer from "@/components/ui/Footer";
import { Navbar } from "@/components/ui/Navbar";
import PostCard from "@/components/ui/PostsCard";
import FloatingIcon from "@/components/ui/emergency/FloatingIcon";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import { useSession } from "next-auth/react";
import dynamic from "next/dynamic";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

function Home() {
	const [selectedButton, setSelectedButton] = useState("featured");
	const [posts, setPosts] = useState([]);
	const [showFilterPostModal, setShowFilterModal] = useState(false);
	const [loading, setLoading] = useState(true);
	const router = useRouter();
	const userSession = getUserSession();

	// to be removed
	const { data: session, status } = useSession();

	const fetchPosts = async () => {
		try {
			const response = await fetch(`${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_POSTS}`, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${Cookies.get("token")}`,
				},
			});
			if (!response.ok) {
				throw new Error("Failed to fetch posts");
			}
			const data = await response.json();
			setPosts(data);
			setLoading(false);
		} catch (error) {
			console.error("Error fetching posts:", error);
			setLoading(false);
		}
	};
	/* Handling unauthenticated users */
	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession && userSession.role !== "student") {
		return <Load route={userSession.role} />;
	}

	useEffect(() => {
		fetchPosts();
	}, []);

	console.log(userSession);

	return (
		<div>
			<main className="min-h-screen">
				<Navbar userType="student" />
				<div
					className="pattern-overlay pattern-left absolute -z-10"
					style={{ transform: "scaleY(-1)", top: "-50px" }}
				>
					<img src="/images/landing/lleft.png" alt="pattern" />
				</div>
				<div
					className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
					style={{ transform: "scaleY(-1)", top: "-15px" }}
				>
					<img
						src="/images/landing/lright.png"
						alt="pattern"
						className="w-full h-full object-contain"
					/>
				</div>
				{/*Posts*/}
				<div className="flex flex-col md:flex-row py-24 px-4 md:px-12 ">
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 flex-grow-2 w-full md:w-11/12 flex flex-col">
						<div className="max-w-8xl mx-auto px-5 flex w-full">
							<div className="flex flex-col  flex-grow-1 items-start my-6">
								<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
									Posts
								</h1>
								<p className="font-Jaldi text-xl sm:text-base">
									Check out the latest posts from the university's Guidance
									Counselor!
								</p>
							</div>
							{/* <div className="ml-auto relative">
								<GiSettingsKnobs
									className="fill-black stroke-0 hover:stroke-2 text-2xl cursor-pointer text-center"
									onClick={() =>
										setShowFilterModal((prev) => !prev)
									}
								/>
								{showFilterPostModal && (
									<div className="absolute w-30 h-22 px-1 shadow-xl bg-slate-100 border border-slate-300 text-slate-600 font-semibold right-0 top-7 z-20 rounded-xl">
										<ul className="p-2 cursor-pointer text-start">
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Latest");
													setShowFilterModal(false);
												}}>
												Latest
											</li>
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Oldest");
													setShowFilterModal(false);
												}}>
												Oldest
											</li>
										</ul>
									</div>
								)}
							</div> */}
						</div>
						<hr />
						<div className="w-full p-2 mx-auto flex-grow max-h-[90vh] overflow-y-auto mt-4">
							{loading ? (
								<LoadingState />
							) : posts.length === 0 ? ( // Check if the posts array is empty
								<p className="text-center mt-4 text-gray-500">
									No posts yet. Come back later.
								</p>
							) : (
								posts.map(
									(
										post // Use 'posts' instead of 'sortedPosts' if you haven't sorted the posts yet
									) => <PostCard key={post.postId} post={post} />
								)
							)}
						</div>
					</div>
					{/*Blogs*/}
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 flex-grow-2 w-full">
						<div className="flex flex-col px-4 flex-grow-1 items-start my-6">
							<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
								Editor's Picks
							</h1>
							<p className="font-Jaldi text-xl sm:text-base">
								Check out the latest posts from the university's Guidance Counselor!
							</p>
						</div>
						<hr />
						<div className="w-full mx-auto flex-grow max-h-[90vh] overflow-y-auto mt-4">
							<Card />
						</div>
					</div>
				</div>
				<Footer />
				<FloatingIcon />
			</main>
		</div>
	);
}

export default dynamic(() => Promise.resolve(Home), { ssr: false });

```

// File: app\student\appointment\page.jsx
```
"use client";

import FullButton from "@/components/ui/buttons/FullButton";
import TextAreaInput from "@/components/ui/inputs/TextAreaInput";
import TextInput from "@/components/ui/inputs/TextInput";
import StudentAddAppointment from "@/components/ui/modals/counselor/appointments/StudentAddAppointment";
import hdrAppointment from "@/public/images/headers/hdrAppointment.png";
import { useEffect, useState } from "react";
// css
import "@/styles/counselor.css";

// modals
import { Navbar } from "@/components/ui/Navbar";
import StudentModalAppointmentInfo from "@/components/ui/modals/counselor/appointments/ModalAppointmentInfo";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";

import Load from "@/components/Load";
import Loading from "@/components/Loading";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import dynamic from "next/dynamic";
import toast from "react-hot-toast";
import { Badge, Calendar, Popover, Whisper } from "rsuite";
import "rsuite/dist/rsuite.min.css";

function getTodoList(date) {
	const day = date.getDate();

	switch (day) {
		case 10:
			return [
				{ time: "10:30 am", title: "Meeting" },
				{ time: "12:00 pm", title: "Lunch" },
				{ time: "10:00 pm", title: "Going home to walk the dog" },
				{ time: "11:00 pm", title: "Going home to walk the dog" },
				{ time: "12:00 pm", title: "Going home to walk the dog" },
				{ time: "12:00 pm", title: "Going home to walk the dog" },
			];
		case 15:
			return [
				{ time: "09:30 pm", title: "Products Introduction Meeting" },
				{ time: "12:30 pm", title: "Client entertaining" },
				{ time: "02:00 pm", title: "Product design discussion" },
				{ time: "05:00 pm", title: "Product test and acceptance" },
				{ time: "06:30 pm", title: "Reporting" },
			];
		default:
			return [];
	}
}

function renderCell(date) {
	const list = getTodoList(date);

	const displayList = list.filter((item, index) => index < 1);

	if (list.length) {
		const moreCount = list.length - displayList.length;
		const moreItem = (
			<li>
				<Whisper
					placement="top"
					trigger="click"
					speaker={
						<Popover>
							{list.map((item, index) => (
								<p key={index}>
									<b>{item.time}</b> - {item.title}
								</p>
							))}
						</Popover>
					}
				>
					<a>{moreCount} more</a>
				</Whisper>
			</li>
		);

		return (
			<ul className="calendar-todo-list">
				{displayList.map((item, index) => (
					<button key={index}>
						<Badge /> <b>{item.time}</b> - {item.title}
					</button>
				))}
				{moreCount ? moreItem : null}
			</ul>
		);
	}

	return null;
}

function timeFormatter(time) {
	let formmatedTime = "";
	switch (time) {
		case "08:00":
		case "09:00":
		case "10:00":
		case "11:00":
			formmatedTime = `${time} AM`;
			break;
		case "12:00":
		case "1:00":
		case "2:00":
		case "3:00":
		case "4:00":
			formmatedTime = `${time} PM`;
			break;
	}

	return formmatedTime;
}

const Appointment = () => {
	const AppointmentPerPage = 10;

	const [selectedID, setSelectedID] = useState(null);
	const [currentPage, setCurrentPage] = useState(1);

	//modals
	const [deleteModal, setDeleteModal] = useState(false);
	const [appointmentModal, setAppointmentModal] = useState(null);

	const [isAddAppointment, setIsAddAppointment] = useState(true);
	const [isViewAppointment, setIsViewAppointment] = useState(false);

	const [appointments, setAppointments] = useState([]);

	const userSession = getUserSession();

	const [appointmentDate, setAppointmentDate] = useState(new Date().toISOString().split("T")[0]);
	const [selectedTime, setSelectedTime] = useState(""); // State to store the selected time
	const [endTime, setEndTime] = useState(""); // State to store the end time
	const [appointmentType, setAppointmentType] = useState(""); // State to store the selected appointment type
	const [purpose, setPurpose] = useState(""); // State to store the purpose of the appointment
	const [appointmentOnThatDate, setAppointmentOnThatDate] = useState([]);

	const [showAddAppointmentModal, setShowAddAppointmentModal] = useState(false);

	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession.role !== "student") {
		return <Load role={userSession.role} />;
	}

	useEffect(() => {
		if (userSession) {
			try {
				fetchAppointments();
			} catch (error) {
				console.log(error);
			}
		}
	}, []);

	const fetchAppointments = async () => {
		const response = await fetch(
			`${process.env.BASE_URL}${API_ENDPOINT.GET_APPOINTMENT_BY_STUDENTID}${userSession.id}`,
			{
				headers: {
					Authorization: `Bearer ${Cookies.get("token")}`,
				},
			}
		);

		if (!response.ok) {
			console.error("Error fetching appointments");
		}
		const data = await response.json();
		setAppointments(data);
	};

	useEffect(() => {
		fetchAppointmentsOnThatDate();
	}, [appointmentDate]);

	const fetchAppointmentsOnThatDate = async () => {
		const response = await fetch(
			`${process.env.BASE_URL}${API_ENDPOINT.GET_APPOINTMENT_BY_DATE}${appointmentDate}`,
			{
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${Cookies.get("token")}`,
				},
			}
		);
		const data = await response.json();
		console.log(data);
		setAppointmentOnThatDate(data);
	};

	const formatDate = (date) => {
		const dateObject = new Date(date);
		const options = { year: "numeric", month: "long", day: "numeric" };
		const finalDate = dateObject.toLocaleDateString("en-US", options);

		return finalDate;
	};

	const handleRowClick = (id) => {
		setSelectedID(id);
		setAppointmentModal(true);
	};

	const showDeleteModal = (id) => {
		setSelectedID(id);
		setDeleteModal(true);
	};

	const handleDelete = async () => {
		// Find
		const selected = appointments.find(
			(appointment) => appointment.appointmentId === selectedID
		);

		// CORS ISSUE - TO BE FIXED
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.DELETE_APPOINTMENT}${selectedID}`,
				{
					method: "DELETE",
					headers: {
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
				}
			);
			if (!response.ok) {
				throw new Error("Failed to delete appointment");
			} else {
				toast.success("Appointment deleted successfully");
				fetchAppointments();
				setDeleteModal(false);
				setSelectedID(null);
			}
		} catch (err) {
			console.log(err);
		}
	};

	// handle reschedule // TO BE ADDED AFTER CALENDAR IMPLEMENTATION
	// const handleReschedule = () => {
	// 	// Find
	// 	const selected = appointments.find(
	// 		(appointment) => appointment.id === selectedID
	// 	);

	// Calculate the index range of appointment to display for the current page
	const indexOfLastInquiry = currentPage * AppointmentPerPage;
	const indexOfFirstInquiry = indexOfLastInquiry - AppointmentPerPage;
	const currentAppointments = appointments?.slice(indexOfFirstInquiry, indexOfLastInquiry);

	const handleAddAppointmentClick = () => {
		setIsAddAppointment(true);
		setIsViewAppointment(false);
	};

	const handleViewAppointmentClick = () => {
		setIsAddAppointment(false);
		setIsViewAppointment(true);
	};

	const timeSlots = ["08:00", "09:00", "10:00", "11:00", "12:00", "1:00", "2:00", "3:00", "4:00"];

	// Helper function to check if a time slot is taken
	const isTimeSlotTaken = (time) => {
		return appointmentOnThatDate.some(
			(appointment) => appointment.appointmentStartTime === time
		);
	};

	const addTime = (startTime, duration) => {
		// Split the start time and duration into hours and minutes
		let [startHours, startMinutes] = startTime.split(":").map(Number);
		let [durationHours, durationMinutes] = duration.split(":").map(Number);

		// Convert start time to 24-hour format if it's PM
		if (startHours < 12 && startTime.includes("PM")) {
			startHours += 12;
		}

		// Add the duration to the start time
		let endHours = startHours + durationHours;
		let endMinutes = startMinutes + durationMinutes;

		// Adjust minutes and hours if minutes exceed 60
		if (endMinutes >= 60) {
			endHours += Math.floor(endMinutes / 60);
			endMinutes %= 60;
		}

		// Convert back to 12-hour format if needed
		let endPeriod = "AM";
		if (endHours >= 12) {
			endPeriod = "PM";
			if (endHours > 12) {
				endHours -= 12;
			}
		}

		// Format the end time back to a string
		endHours = endHours.toString().padStart(2, "0");
		endMinutes = endMinutes.toString().padStart(2, "0");

		return `${endHours}:${endMinutes} ${endPeriod}`;
	};

	const handleTimeSlotClick = (time) => {
		if (!isTimeSlotTaken(time)) {
			setSelectedTime(time); // Update the selected time
			const duration = "1:00"; // Duration to add
			setEndTime(addTime(selectedTime, duration));
		}
	};

	const handleAppointmentSubmit = async () => {
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.STUDENT_CREATE_APPOINTMENT}${userSession.id}`,
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
					body: JSON.stringify({
						appointmentDate: appointmentDate,
						appointmentStartTime: selectedTime,
						appointmentEndTime: endTime,
						appointmentType: appointmentType,
						appointmentPurpose: purpose,
					}),
				}
			);

			if (response.ok) {
				console.log("Appointment created successfully");
			}

			setPurpose("");
			setAppointmentType("");
			fetchAppointments();
			fetchAppointmentsOnThatDate();
			setIsAddAppointment(false);
			setIsViewAppointment(true);
		} catch (error) {
			console.log(error);
		}
	};

	const formatDateCalendar = (date) => {
		const year = date.getFullYear();
		const month = String(date.getMonth() + 1).padStart(2, "0");
		const day = String(date.getDate()).padStart(2, "0");
		return `${year}-${month}-${day}`;
	};

	return (
		<div className="min-h-screen w-full">
			{/* navigation bar */}
			<Navbar userType="student" />

			{/* header */}
			<div className="w-full h-[45vh] md:h-[55vh] relative">
				{/* Background image */}
				<div
					className="absolute inset-0 bg-cover bg-center opacity-40"
					style={{
						backgroundImage: `url(${hdrAppointment.src})`,
					}}
				></div>

				{/* Content */}
				<div className="relative z-10 flex items-center justify-center h-full">
					<div className="flex flex-col text-left px-6 md:px-20 lg:px-44 py-10 gap-y-4">
						<h1 className="font-Merriweather text-4xl md:text-6xl lg:text-8xl">
							Appointments
						</h1>
						<p className="w-full md:w-3/4 lg:w-1/2 font-Jaldi text-lg md:text-xl">
							Manage sessions effortlessly and provide tailored guidance and support
							to students through efficient booking and coordination. Streamline your
							scheduling process and ensure students receive personalized attention.
						</p>
					</div>
				</div>
			</div>

			{userSession ? (
				<div>
					<div className="w-full mt-8 flex items-center gap-3 justify-center">
						<button
							className={`font-medium px-4 py-2 rounded-full transition-colors duration-200 ${
								isAddAppointment
									? "bg-primary-green text-white"
									: "border border-primary-green text-primary-green"
							}`}
							onClick={handleAddAppointmentClick}
						>
							Set Appointment
						</button>
						<button
							className={`font-medium px-4 py-2 rounded-full transition-colors duration-200 ${
								isViewAppointment
									? "bg-primary-green text-white"
									: "border border-primary-green text-primary-green"
							}`}
							onClick={handleViewAppointmentClick}
						>
							View Appointments
						</button>
					</div>

					{isViewAppointment ? (
						<div className="w-full flex flex-col text-center">
							{/* table*/}
							<div className="overflow-x-auto lg:px-56 lg:py-10 md:px-48 md:6 sm:px-1 sm:py-4">
								<div className="overflow-x-auto mt-12 md:mt-2">
									<table className="w-full table-auto">
										{/* head */}
										<thead className="bg-gray-200">
											<tr className="font-bold text-center">
												<th className="py-2">ID</th>
												<th className="py-2">Date</th>
												<th className="py-2">Time</th>
												<th className="py-2">Appointment Type</th>
												<th className="py-2">Reason</th>
												<th className="py-2">Status</th>
												{/* Delete and Edit*/}
												<th className="no-hover-highlight"></th>
											</tr>
										</thead>
										<tbody>
											{currentAppointments?.map((appointment) => (
												<tr
													key={appointment.appointmentId}
													onClick={() =>
														handleRowClick(appointment.appointmentId)
													}
													className="cursor-pointer hover:bg-gray-100 transition duration-300 ease-in-out"
												>
													<td className="text-center py-2">
														{appointment.appointmentId}
													</td>
													<td>
														<div className="text-center py-2">
															{formatDate(
																appointment.appointmentDate
															)}
														</div>
													</td>
													<td className="text-center py-2">
														{appointment.appointmentStartTime}
													</td>
													<td className="text-center py-2">
														{appointment.appointmentType}
													</td>
													<td className="text-center py-2">
														<p className="truncate">
															{appointment.appointmentPurpose.length >
															50
																? `${appointment.appointmentPurpose.substring(
																		0,
																		40
																  )}...`
																: appointment.appointmentPurpose}
														</p>
													</td>
													<td className="text-center py-2">
														<div
															className={`badge ${
																appointment.appointmentStatus ===
																"Pending"
																	? "badge-warning"
																	: appointment.appointmentStatus ===
																	  "Done"
																	? "badge-success"
																	: appointment.appointmentStatus ===
																	  "Approved"
																	? "badge-info"
																	: ""
															}`}
														>
															{appointment.appointmentStatus}
														</div>
													</td>
													{/* Delete and Edit */}
													<td>
														<div className="text-center py-2">
															<button
																className="btn btn-xs"
																onClick={(e) => {
																	e.stopPropagation();
																	showDeleteModal(
																		appointment.appointmentId
																	);
																}}
															>
																Delete
															</button>
															{/* <button className="btn btn-xs text-green-700">Edit</button> */}
														</div>
													</td>
												</tr>
											))}
										</tbody>
									</table>
								</div>

								{/* Pagination controls */}
								<div className="join pt-5">
									<button
										onClick={() => setCurrentPage(currentPage - 1)}
										disabled={currentPage === 1}
										className="join-item btn w-28"
									>
										Previous
									</button>

									{appointments &&
										[
											...Array(
												Math.ceil(appointments.length / AppointmentPerPage)
											),
										].map((_, index) => (
											<button
												key={index}
												className={`join-item btn ${
													currentPage === index + 1 ? "btn-active" : ""
												}`}
												onClick={() => setCurrentPage(index + 1)}
											>
												{index + 1}
											</button>
										))}

									<button
										onClick={() => setCurrentPage(currentPage + 1)}
										disabled={AppointmentPerPage > appointments?.length}
										className="join-item btn w-28"
									>
										Next
									</button>
								</div>
							</div>
						</div>
					) : (
						<div className="flex w-full py-10 px-8 gap-10 justify-center md:flex-row flex-col">
							<div className="flex-1">
								<Calendar
									bordered
									renderCell={renderCell}
									onSelect={(date) => {
										if (date >= new Date().setHours(0, 0, 0, 0)) {
											setAppointmentDate(formatDateCalendar(date));
											toast.success("Date selected");
										}
									}}
									disabledDate={(date) => date < new Date().setHours(0, 0, 0, 0)}
								/>
							</div>
							{appointmentOnThatDate && (
								<div className="flex-1">
									<h2 className="font-semibold text-lg mb-2">
										Available Time Slots
									</h2>
									<p>
										üõë To set an appointment, you must first select a valid date
										in the calendar, then choose your desired time slot.
									</p>
									<p>
										üõë Do note that you can only select a time slot that has not
										been taken yet.
									</p>
									<div className="flex flex-wrap gap-2 mt-8">
										{timeSlots.map((time, index) => (
											<button
												key={index}
												disabled={isTimeSlotTaken(time)}
												onClick={() => handleTimeSlotClick(time)} // Set the selected time on click
												className={`time-slot-button ${
													isTimeSlotTaken(time)
														? "bg-white border-[1px] border-[#CCE3DE] text-primary-green cursor-not-allowed"
														: "bg-primary-green text-white hover:bg-primary-green-dark duration-300"
												}  py-2 px-4 rounded-md`}
											>
												{timeFormatter(time)}
											</button>
										))}
									</div>
									<hr />
									<div className="mt-4">
										<p>
											ü§ó Please state the type of appointment and your
											purpose.
										</p>
										<div className="w-full flex lg:flex-col gap-5 my-5 flex-col">
											<TextInput
												value={appointmentType}
												onChange={(e) => setAppointmentType(e.target.value)}
												placeholder="Appointment Type"
												label="Appointment Type"
											/>
											<TextAreaInput
												value={purpose}
												onChange={(e) => setPurpose(e.target.value)}
												placeholder="Purpose"
												label="Purpose"
												className="w-full mb-4 rounded-md "
												id={purpose}
											/>
										</div>
										<hr />
										<div className="flex flex-col md:flex-row justify-between items-start md:items-center mt-5 rounded-xl px-4 py-2 font-Merriweather gap-4 md:gap-6">
											<div className="flex flex-col md:flex-row justify-between items-start md:items-center border-2 border-black  rounded-xl md:rounded-full px-4 py-2 font-Merriweather gap-4 md:gap-0 w-full h-auto md:h-[56px]">
												<div className="font-bold w-full md:w-auto">
													DATE: {appointmentDate}
												</div>
												<div className="font-bold w-full md:w-auto">
													TIME: {timeFormatter(selectedTime)}
												</div>
											</div>
											<div className="w-full md:w-2/12">
												<FullButton
													disabled={!selectedTime}
													onClick={handleAppointmentSubmit}
													className="w-full"
												>
													Submit
												</FullButton>
											</div>
										</div>
									</div>
								</div>
							)}
						</div>
					)}
				</div>
			) : (
				<Loading />
			)}

			{/* modals */}
			{deleteModal && (
				<ModalDelete
					setDeleteModal={setDeleteModal}
					handleDelete={handleDelete}
				></ModalDelete>
			)}

			{appointmentModal && (
				<StudentModalAppointmentInfo
					setAppointmentModal={setAppointmentModal}
					selectedID={selectedID}
					appointments={appointments}

					// TO BE ADDED
					// handleRescedule={handleReschedule}
					// handleUpdateStatus={handleUpdateStatus}
				></StudentModalAppointmentInfo>
			)}

			{showAddAppointmentModal && (
				<StudentAddAppointment setShowAddAppointmentModal={setShowAddAppointmentModal} />
			)}
		</div>
	);
};

export default dynamic(() => Promise.resolve(Appointment), { ssr: false });

```

// File: app\student\calendar\page.jsx
```
"use client";

import { Navbar } from "@/components/ui/Navbar";
import CalendarScheduling from "@/components/ui/calendar/CalendarScheduling";
import Events from "@/components/ui/calendar/Events";
import ViewEvents from "@/components/ui/calendar/ViewEvents";
import GlobalContext from "@/context/GlobalContext";
import { useContext } from "react";

export default function CalendarView() {
  const { showEventModal, viewEvents } = useContext(GlobalContext);

  const events = [
    {
      id: 1,
      tag: "Event",
      date: "2024-05-04",
      time: "10:00 AM",
      user: {
        idNumber: "2024-0001",
        firstName: "John",
        lastName: "Doe",
        institutionalEmail: "jdoe@gmail.com",
        image: "/path/to/image.jpg",
      },
      name: "PA-MIST-TEH: Sale on Mists and Teas",
      type: "Event 1 Type",
      location: "Location 1",
      additional_notes:
        "This event is a sale on mists and teas. Get your mists and teas here! Enjoy up to 50% off on selected items that is curated by the people behind always sunny in philadelphia, pamistteh!",
      status: "Upcoming",
    },
    {
      id: 2,
      tag: "Event",
      date: "2024-05-04",
      time: "10:00 AM",
      user: {
        idNumber: "2024-0001",
        firstName: "John",
        lastName: "Doe",
        institutionalEmail: "jdoe@gmail.com",
        image: "/path/to/image.jpg",
      },
      name: "BALIKWAS: Refusing to be Silenced",
      type: "Event 1 Type",
      location: "Location 1",
      additional_notes:
        "BALIKWAS is a webinar held by the Institute of Balikwas University to mitigate the risks of Baliwasing the demons by Doja Cat.",
      status: "Upcoming",
    },
    {
      id: 3,
      tag: "Event",
      date: "2024-05-04",
      time: "10:00 AM",
      user: {
        idNumber: "2024-0001",
        firstName: "John",
        lastName: "Doe",
        institutionalEmail: "jdoe@gmail.com",
        image: "/path/to/image.jpg",
      },
      name: "GI-ATAY: Liver and Kidney Failure Awareness Campaign",
      type: "Event 1 Type",
      location: "Location 1",
      additional_notes:
        "GI-ATAY, which is a pretty vulgar word, actually aims to educate young people on the importance of their liver health. Expresso martini on a Tuesday night? Well Goddamn, you're gonna need this event.",
      status: "Upcoming",
    },
    {
      id: 4,
      tag: "Event",
      date: "2024-05-04",
      time: "10:00 AM",
      user: {
        idNumber: "2024-0001",
        firstName: "John",
        lastName: "Doe",
        institutionalEmail: "jdoe@gmail.com",
        image: "/path/to/image.jpg",
      },
      name: "BRO-ANGG: The Adventures of Angg and His BROS",
      type: "Event 1 Type",
      location: "Location 1",
      additional_notes:
        "Bro-Angg is wordplay on a classic Bisaya curse word Boang, which means crazy. I'm not crazy, maybe Angg is. Is Angg crazy?",
      status: "Upcoming",
    },
  ];

  const appointments = [
    {
      id: 1,
      tag: "Event",
      date: "March 15, 2024",
      time: "11:00 AM",
      user: {
        idNumber: "2024-0001",
        firstName: "John",
        lastName: "Doe",
        institutionalEmail: "jdoe@gmail.com",
        image: "/path/to/image.jpg",
      },
      name: "PA-MIST-TEH: Sale on Mists and Teas",
      type: "Event 1 Type",
      location: "Location 1",
      additional_notes:
        "This event is a sale on mists and teas. Get your mists and teas here! Enjoy up to 50% off on selected items that is curated by the people behind always sunny in philadelphia, pamistteh!",
      status: "Upcoming",
    },
  ];

  return (
    <div className="h-screen flex flex-row">
      <Navbar userType="student" />

      <section className="bg-gray-200 h-[90vh] w-full flex flex-row mt-20 p-6">
        <CalendarScheduling />
        <Events events={events} />
      </section>

      {viewEvents && <ViewEvents />}
    </div>
  );
}

```

// File: app\student\inquiry\page.jsx
```
"use client";
import Questions from "@/components/ui/FAQs";
import Inquiry from "@/components/ui/Inquiry";
import { Navbar } from "@/components/ui/Navbar";
import { useSession } from "next-auth/react";

export default function StudentInquiry() {
  const { data: session, status } = useSession();
  const userId = session?.user.id;
  const faqList = [
    {
      question: "What is WellTalk?",
      answer:
        "WellTalk is a comprehensive platform designed to facilitate seamless communication and scheduling between students and counselors, ensuring a supportive environment for mental health and well-being.",
    },
    {
      question: "How do I schedule an appointment with a counselor on WellTalk?",
      answer:
        "To schedule an appointment with a counselor on WellTalk, log in to your account and navigate to the Appointments or Schedule section. From there, you can elect a convenient time slot and confirm your appointment.",
    },
    {
      question: "Is my information confidential and secure on WellTalk?",
      answer:
        "Yes, we take your privacy and security seriously on WellTalk. Your information is encrypted and stored securely according to industry standards. Only authorized personnel have access to your data, and we adhere to strict confidentiality protocols.",
    },

    {
      question: "Can I reschedule or cancel appointments?",
      answer:
        "Yes, you can reschedule or cancel appointments through your WellTalk account. Simply go to the Appointments section, locate the appointment you wish to change, and follow the prompts to adjust the date and time or cancel the appointment.",
    },
    {
      question: "Are there resources available for self-help and mental health tips?",
      answer:
        ": Absolutely! WellTalk provides a wealth of resources, including self-help guides, mental health tips, and informative articles to support your well-being journey. Explore our Resources section to access these valuable materials.",
    },
    {
      question: "Is WellTalk accessible on mobile devices?",
      answer:
        "Yes, WellTalk is fully accessible on mobile devices. We've designed the app to be responsive and user-friendly on smartphones and tablets, ensuring that you can access all features and functionalities seamlessly on the go.",
    },
  ];
  const contactMethods = [
    {
        icon:
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="#FFFFFF" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" />
            </svg>
        ,
        title: "Join our community",
        desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        link: {
            name: "Join our Discord",
            href: "javascript:void(0)"
        },
    },
    {
        icon:
            <svg className="w-6 h-6" viewBox="0 0 48 48" fill="#FFFFFF" xmlns="http://www.w3.org/2000/svg" stroke="#FFFFFF">
                <g clip-path="url(#clip0_17_80)">
                    <path d="M15.1003 43.5C33.2091 43.5 43.1166 28.4935 43.1166 15.4838C43.1166 15.0619 43.1072 14.6307 43.0884 14.2088C45.0158 12.815 46.679 11.0886 48 9.11066C46.205 9.90926 44.2993 10.4308 42.3478 10.6575C44.4026 9.42588 45.9411 7.491 46.6781 5.21159C44.7451 6.35718 42.6312 7.16528 40.4269 7.60128C38.9417 6.02318 36.978 4.97829 34.8394 4.62816C32.7008 4.27803 30.5064 4.64216 28.5955 5.66425C26.6846 6.68635 25.1636 8.30947 24.2677 10.2827C23.3718 12.2559 23.1509 14.4693 23.6391 16.5807C19.725 16.3842 15.8959 15.3675 12.4 13.5963C8.90405 11.825 5.81939 9.33893 3.34594 6.29909C2.0888 8.46655 1.70411 11.0314 2.27006 13.4722C2.83601 15.9131 4.31013 18.047 6.39281 19.44C4.82926 19.3904 3.29995 18.9694 1.93125 18.2119V18.3338C1.92985 20.6084 2.7162 22.8132 4.15662 24.5736C5.59704 26.334 7.60265 27.5412 9.8325 27.99C8.38411 28.3863 6.86396 28.4441 5.38969 28.1588C6.01891 30.1149 7.24315 31.8258 8.89154 33.0527C10.5399 34.2796 12.5302 34.9613 14.5847 35.0025C11.0968 37.7423 6.78835 39.2283 2.35313 39.2213C1.56657 39.2201 0.780798 39.1719 0 39.0769C4.50571 41.9676 9.74706 43.5028 15.1003 43.5Z" fill="#FFFFFFF" />
                </g>
                <defs>
                    <clipPath id="clip0_17_80">
                        <rect width="48" height="48" fill="white" />
                    </clipPath>
                </defs>
            </svg>

        ,
        title: "Follow us on Twitter",
        desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        link: {
            name: "Send us DMs",
            href: "javascript:void(0)"
        },
    },
]
  return (
    <div className="min-h-screen">
      <Navbar userType="student" />
      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>
      <main className="justify-center items-center h-full w-full">
        <Questions faqList={faqList} />
        <div className="w-full mx-auto p-6 text-gray-600 gap-12 lg:flex justify-center" style={{ backgroundColor: "#1F2724" }}>
          <div className="px-4 py-8 mx-auto sm:max-w-xl md:max-w-full lg:max-w-screen-xl md:px-24 lg:px-8 lg:py-12">
                <div className="max-w-md mb-12">
                    <h3 className=" text-3xl text-white font-semibold sm:text-4xl" style={{ backgroundColor: "#1F2724" }}>
                        Let‚Äôs connect
                    </h3>
                    <p className="mt-3 text-white">
                        We‚Äôre here to help and answer any question you might have, We look forward to hearing from you .
                    </p>
                </div>
                <div>
                    <ul className="mt-12 gap-y-6 gap-x-12 items-center md:flex lg:gap-x-0 lg:mt-0">
                        {
                            contactMethods.map((item, idx) => (
                                <li key={idx} className="space-y-3 border-t py-6 md:max-w-sm md:py-0 md:border-t-0 lg:border-l lg:px-12 lg:max-w-none">
                                    <div className="w-12 h-12 rounded-full border flex items-center justify-center text-gray-700">
                                        {item.icon}
                                    </div>
                                    <h4 className="text-gray-800 text-lg font-medium xl:text-xl text-white">
                                        {item.title}
                                    </h4>
                                    <p className="text-white">
                                        {item.desc}
                                    </p>
                                    <a href={item.link.href} className="flex items-center gap-1 text-sm duration-150 hover:text-white font-medium" style={{ color: "#6B9080" }}>
                                        {item.link.name}
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">
                                            <path fillRule="evenodd" d="M5 10a.75.75 0 01.75-.75h6.638L10.23 7.29a.75.75 0 111.04-1.08l3.5 3.25a.75.75 0 010 1.08l-3.5 3.25a.75.75 0 11-1.04-1.08l2.158-1.96H5.75A.75.75 0 015 10z" clipRule="evenodd" />
                                        </svg>
                                    </a>
                                </li>
                            ))
                        }
                    </ul>
                </div>
                </div>
            </div>
        <div className="flex justify-center">
          <div className="mx-auto w-2/3">
            {" "}
            {/* Adjust width as needed */}
            <Inquiry userId={userId} />
          </div>
        </div>
      </main>
    </div>
  );
}

```

// File: app\student\journal\page.jsx
```
"use client";
import Load from "@/components/Load";
import { Navbar } from "@/components/ui/Navbar";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import Image from "next/image";
import { useEffect, useState } from "react";
import { toast } from "react-hot-toast";
import JournalModal from "./_modal/JournalModal";

import JournalList from "@/components/JournalList";
import dynamic from "next/dynamic";

const StudentJournal = () => {
	const userSession = getUserSession();
	const [title, setTitle] = useState("");
	const [entry, setEntry] = useState("");
	const [editTitle, setEditTitle] = useState("");
	const [editEntry, setEditEntry] = useState("");
	const [journalEntries, setJournalEntries] = useState([{}]);
	const [highlightEntry, setHighlightEntry] = useState({});
	const [isEditing, setIsEditing] = useState(false);
	const [showModal, setShowModal] = useState(false);

	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession.role !== "student") {
		return <Load role={userSession.role} />;
	}

	const fetchEntries = async () => {
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.GET_JOURNAL_BY_STUDENT_ID}${userSession.id}`,
				{
					headers: {
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
				}
			);

			const data = await response.json();
			setJournalEntries(data);

			if (data.length > 0) {
				setHighlightEntry(data[0]);
			} else {
				setHighlightEntry(null);
			}
		} catch (error) {
			toast.error("Error fetching entries");
			throw new Error("Error fetching entries");
		}
	};

	const handleClickedEntry = (journalId) => {
		if (!isEditing) {
			const selectedEntry = journalEntries.find((entry) => entry.journalId === journalId);

			if (selectedEntry) {
				setHighlightEntry(selectedEntry);
			}
		}
	};

	const handleSaveEntry = async (e) => {
		e.preventDefault();

		try {
			if (!title.trim() || !entry.trim()) {
				alert("Empty fields");
				return;
			}

			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.STUDENT_CREATE_JOURNAL}${userSession.id}`,
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
					body: JSON.stringify({
						title: title,
						entry: entry,
					}),
				}
			);
			const data = await response.json();

			if (data) {
				toast.success("Added entry successfully");
				setShowModal(false);
			}

			setTitle("");
			setEntry("");

			fetchEntries();
		} catch (error) {
			toast.error("Failed adding entry");
		}
	};

	const handleDeleteEntry = async (journalId) => {
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.STUDENT_DELETE_JOURNAL}${journalId}`,
				{
					method: "DELETE",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
				}
			);

			if (response.ok) {
				toast.success(`Journal entry with ID ${journalId} deleted successfully.`);
				fetchEntries();
				setIsEditing(false);
			} else {
				toast.error(`Failed to delete journal entry with ID ${journalId}.`);
			}
		} catch (error) {
			console.error("Error occurred while deleting journal entry:", error);
		}
	};

	const handleEditEntry = async () => {
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.STUDENT_UPDATE_JOURNAL}${highlightEntry?.journalId}`,
				{
					method: "PUT",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
					body: JSON.stringify({
						title: editTitle,
						entry: editEntry,
					}),
				}
			);

			if (response.ok) {
				const updatedEntry = await response.json();
				toast.success("Journal entry updated successfully!");

				// Update the state with the updated entry
				setJournalEntries(
					journalEntries.map((entry) =>
						entry.journalId === updatedEntry.journalId ? updatedEntry : entry
					)
				);
				setHighlightEntry(updatedEntry);
				setIsEditing(false);
			} else {
				toast.error("Failed to update journal entry!");
			}
		} catch (error) {
			console.error("Error updating journal entry:", error);
			toast.error("Internal Server Error");
		}
	};

	useEffect(() => {
		fetchEntries();
	}, []);

	useEffect(() => {
		setEditTitle(highlightEntry?.title || "");
		setEditEntry(highlightEntry?.entry || "");
	}, [isEditing]);

	return (
		<div className="w-full flex flex-col justify-center items-center bg-white font-Merriweather">
			<Navbar userType="student" />
			<div className="flex w-full h-screen mt-[104px] px-20 pb-5 lg:flex-row xs:flex-col gap-10">
				<div className="flex-1 overflow-y-auto ">
					<JournalList
						entries={journalEntries}
						isEditing={isEditing}
						handleClickedEntry={handleClickedEntry}
						handleDeleteEntry={handleDeleteEntry}
					/>
				</div>
				<div className="flex-1 w-full h-[86%] p-16 rounded-2xl shadow-2xl relative md:w-3/4 xs:w-full">
					<div className="w-full h-full overflow-y-auto p-5">
						{isEditing ? (
							<input
								type="text"
								className="text-4xl text-[#6B9080] w-full bg-white border"
								value={editTitle}
								onChange={(e) => setEditTitle(e.target.value)}
							/>
						) : (
							<h1 className="text-4xl text-[#6B9080]">{highlightEntry?.title}</h1>
						)}
						{isEditing ? (
							<textarea
								type="text"
								className="mt-9 text-lg font-light text-black w-full h-full bg-white border"
								value={editEntry}
								onChange={(e) => setEditEntry(e.target.value)}
							></textarea>
						) : (
							<p className="mt-9 text-lg font-light text-black">
								{highlightEntry?.entry}
							</p>
						)}
						<Image
							src={"/images/journal-spring.png"}
							height={38}
							width={22}
							className="absolute -left-2 top-12"
							alt="Journal Spring"
						/>
						<Image
							src={"/images/journal-spring.png"}
							height={38}
							width={22}
							className="absolute -left-2 bottom-12"
							alt="Journal Spring"
						/>
					</div>
					<div className="flex gap-6 items-center justify-end">
						{isEditing ? (
							<>
								<button
									className="z-10 tooltip tooltip-success"
									data-tip={`${isEditing ? "Cancel" : "Edit"}`}
									onClick={() => setIsEditing((prevState) => !prevState)}
								>
									<Image
										src={"/images/icons/edit.png"}
										width={30}
										height={30}
										alt="Edit Icon"
									/>
								</button>
								<button
									className="z-10 tooltip tooltip-success"
									data-tip="Save Changes"
									onClick={handleEditEntry}
								>
									<Image
										src={"/images/icons/saveEdit.png"}
										width={30}
										height={30}
										alt="Save Changes Icon"
									/>
								</button>
							</>
						) : (
							<>
								<button
									className="z-10 tooltip tooltip-success"
									data-tip="Edit"
									onClick={() => setIsEditing((prevState) => !prevState)}
								>
									<Image
										src={"/images/icons/edit.png"}
										width={30}
										height={30}
										alt="Edit Icon"
									/>
								</button>

								<button
									className="z-10 tooltip tooltip-success"
									data-tip="New Entry"
									onClick={() => setShowModal(true)}
								>
									<Image
										src={"/images/icons/addjournal.png"}
										width={30}
										height={30}
										alt="Add Journal Icon"
									/>
								</button>
							</>
						)}
					</div>
				</div>
				{showModal && (
					<JournalModal
						title={title}
						entry={entry}
						setTitle={setTitle}
						setEntry={setEntry}
						setShowModal={setShowModal}
						handleSaveEntry={handleSaveEntry}
					/>
				)}
			</div>
		</div>
	);
};

export default dynamic(() => Promise.resolve(StudentJournal), { ssr: false });

```

// File: app\student\journal\_modal\JournalModal.jsx
```
const JournalModal = ({
  title,
  entry,
  setTitle,
  setEntry,
  setShowModal,
  handleSaveEntry,
}) => {
  return (
    <div className="modal-box bg-white max-w-4xl flex flex-col absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 ">
      <h3 className="p-5 border-b-2 font-light text-black text-2xl text-center">
        Create new entry
      </h3>
      <input
        type="text"
        placeholder="Journal title..."
        className="input input-bordered input-md w-full max-w-4xl bg-white mt-10"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
      />
      <textarea
        placeholder="Share your thoughts..."
        className="textarea textarea-bordered textarea-md w-full max-w-4xl bg-white mt-5"
        value={entry}
        onChange={(e) => setEntry(e.target.value)}
      ></textarea>

      <div className="mt-10">
        <div className="flex gap-2">
          {/* if there is a button, it will close the modal */}
          <button
            className="btn btn-outline"
            onClick={() => setShowModal(false)}
          >
            Cancel
          </button>
          <button className="btn" onClick={handleSaveEntry}>
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

export default JournalModal;

```

// File: app\student\profile\page.jsx
```
"use client";
import { PlusIcon } from "@heroicons/react/solid";
import { Navbar } from "@/components/ui/Navbar";
import FullButton from "@/components/ui/buttons/FullButton";
import HollowButton from "@/components/ui/buttons/HollowButton";
import TextInput from "@/components/ui/inputs/TextInput";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import { getDownloadURL, ref, uploadBytes } from "firebase/storage";
import { v4 } from "uuid"; // Make sure this is configured correctly
import { imgDB } from "@/firebaseConfig";
import toast from "react-hot-toast";
import Loading from "@/components/Loading";
import { logout } from "@/lib/helperFunctions";

export default function StudentProfile() {
  const userSession = getUserSession();
  const [isEditMode, setIsEditMode] = useState(false);
  const [studentProfile, setStudentProfile] = useState(null);
  const [updatedProfile, setUpdatedProfile] = useState({});
  const [loading, setLoading] = useState(true);
  const [passwords, setPasswords] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [showInvalidPassword, setShowInvalidPassword] = useState({
    currentPassword: false,
    newPassword: false,
    confirmPassword: false,
    passwordMismatch: false,
  });

  useEffect(() => {
    const fetchStudentProfile = async () => {
      try {
        const response = await fetch(
          `${process.env.BASE_URL}${API_ENDPOINT.GET_STUDENT_BY_ID}${userSession.id}`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${Cookies.get("token")}`,
            },
          }
        );
        if (!response.ok) {
          throw new Error("Failed to fetch posts");
        }
        const data = await response.json();
        setStudentProfile(data);
        setUpdatedProfile(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching posts:", error);
        setLoading(false);
      }
    };

    fetchStudentProfile();
  }, []);

  if (userSession && userSession.role !== "student") {
    return <Load route={userSession.role} />;
  }

  const formatTime = (time) => {
    return new Date(time).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const handleUpdateProfile = () => {
    setIsEditMode(true);
  };

  const validatePassword = (password) => {
    const regex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return regex.test(password);
  };

  const handleChange = (key) => (e) => {
    const value = e.target.value;
    setUpdatedProfile((prevProfile) => ({
      ...prevProfile,
      [key]: value,
    }));
  };

  const handleChangeAddress = (e) => {
    const value = e.target.value;
    const parts = value.split(",");

    const barangay = parts[0] ? parts[0].trim() : "";
    const specificAddress = parts[1] ? parts[1].trim() : "";
    const city = parts[2] ? parts[2].trim() : "";

    setUpdatedProfile((prevProfile) => ({
      ...prevProfile,
      barangay: barangay,
      specificAddress: specificAddress,
      city: city,
    }));
  };

  const handleCancelEdit = () => {
    setIsEditMode(false);
    setUpdatedProfile(studentProfile);
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();

    if (passwords.newPassword !== passwords.confirmPassword) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        passwordMismatch: true,
      }));
      return;
    }

    if (passwords.newPassword && !validatePassword(passwords.newPassword)) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        newPassword: true,
      }));
      toast.error(
        "Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character."
      );
      return;
    }

    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.UPDATE_STUDENT}${userSession.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
          body: JSON.stringify({
            institutionalEmail: updatedProfile.institutionalEmail,
            idNumber: updatedProfile.idNumber,
            firstName: updatedProfile.firstName,
            lastName: updatedProfile.lastName,
            gender: updatedProfile.gender,
            contactNumber: updatedProfile.contactNumber,
            password: updatedProfile.password,
            image: updatedProfile.image,
            college: updatedProfile.college,
            program: updatedProfile.program,
            year: updatedProfile.year,
            birthDate: updatedProfile.birthDate,
            specificAddress: updatedProfile.specificAddress,
            barangay: updatedProfile.barangay,
            city: updatedProfile.city,
            province: updatedProfile.province,
            zipCode: updatedProfile.zipCode,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Server error response:", errorData);
        throw new Error(
          `Failed to update student profile: ${response.statusText}`
        );
      }

      if (passwords.newPassword && passwords.confirmPassword) {
        try {
          const passwordResponse = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.CHANGE_PASSWORD}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${Cookies.get("token")}`,
              },
              body: JSON.stringify({
                email: updatedProfile.institutionalEmail,
                oldPassword: passwords.currentPassword,
                newPassword: passwords.newPassword,
              }),
            }
          );

          if (!passwordResponse.ok) {
            const errorData = await passwordResponse.json();
            console.error("Server error response:", errorData);
            throw new Error(
              `Failed to update password: ${passwordResponse.statusText}`
            );
          } else {
            toast.success(
              "Profile updated successfully. You will be logged out for security reasons. Please log in again."
            );
            setTimeout(() => {
              logout();
            }, 3000);
          }
        } catch (error) {
          console.error("Error updating password:", error);
        }
      }

      const data = await response.json();
      setStudentProfile(data);
      setIsEditMode(false);
    } catch (error) {
      console.error("Error updating student profile:", error);
    }
  };

  console.log("Updated Profile:", updatedProfile);

  const handlePasswordChange = (label) => (e) => {
    const pw = e.target.value;

    setPasswords((prevPasswords) => ({
      ...prevPasswords,
      [label]: pw,
    }));

    setShowInvalidPassword((prevShowInvalidPassword) => ({
      ...prevShowInvalidPassword,
      [label]: pw && !validatePassword(pw),
      passwordMismatch:
        label === "confirmPassword" ? pw !== passwords.newPassword : false,
    }));
  };

  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (file) {
      const imgRef = ref(imgDB, `UserAvatars/${v4()}`);
      const snapshot = await uploadBytes(imgRef, file);
      const imgUrl = await getDownloadURL(snapshot.ref);
      setUpdatedProfile((prevProfile) => ({
        ...prevProfile,
        image: imgUrl,
      }));
    }
  };

  if (loading) {
    return <Loading />;
  }

  console.log("Student Profile:", studentProfile);
  console.log("Updated Profile:", updatedProfile);

  return (
    <div className="p-4 mt-16 md:p-12">
      <Navbar userType="student" />

      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>

      <section className="w-full pt-4 md:mt-6 p-8 md:p-12 flex flex-col justify-center items-center">
        <div className="w-full max-w-screen-lg mx-auto flex flex-col gap-4 md:gap-8">
          <section className="flex flex-col md:flex-row md:gap-10 mb-8 justify-center items-center">
            {/* Avatar */}
            <div className="w-full md:w-2/12 flex justify-center items-center avatar relative">
              <div className="w-48 rounded-full ring ring-[#6B9080] ring-offset-base-100 ring-offset-1">
                <img src={studentProfile?.image} alt="avatar" />
                {isEditMode && (
                  <label
                    htmlFor="file-upload"
                    className="absolute bottom-0 right-5 bg-primary-green text-white p-1 rounded-full cursor-pointer"
                  >
                    <input
                      id="file-upload"
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleFileChange}
                    />
                    <PlusIcon className="h-5 w-5 text-white" />
                  </label>
                )}
              </div>
            </div>
            {/* User Info */}
            <div className="w-full md:w-10/12 flex flex-col justify-center md:mt-0 mt-4">
              <h1 className="font-Merriweather text-2xl md:text-4xl font-bold tracking-tight mt-4">
                Hello, {studentProfile?.firstName} {studentProfile?.lastName}
              </h1>
              <p className="font-Merriweather tracking-tight font-thin my-2">
                {studentProfile?.institutionalEmail}
              </p>
              <div className="w-full md:w-5/12 mt-1">
                {!isEditMode && (
                  <FullButton onClick={handleUpdateProfile}>
                    Update Profile
                  </FullButton>
                )}
              </div>
            </div>
          </section>

          <section className="flex flex-col md:flex-row gap-6 md:gap-10 mt-2">
            {/* User Information */}
            <div className="w-full md:w-4/6">
              <div className="">
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  User Information
                </h1>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-full">
                    <TextInput
                      label="First Name"
                      value={
                        isEditMode
                          ? updatedProfile?.firstName
                          : studentProfile?.firstName
                      }
                      onChange={handleChange("firstName")}
                      placeholder="First Name"
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full md:w-full">
                    <TextInput
                      label="Last Name"
                      value={
                        isEditMode
                          ? updatedProfile.lastName
                          : studentProfile?.lastName
                      }
                      onChange={handleChange("lastName")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Gender"
                      value={
                        isEditMode
                          ? updatedProfile.gender
                          : studentProfile?.gender
                      }
                      onChange={handleChange("gender")}
                      readOnly
                      disabled
                    />
                  </div>
                </div>
              </div>
              {/* College Information */}
              <div>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="ID Number"
                      value={
                        isEditMode
                          ? updatedProfile.idNumber
                          : studentProfile?.idNumber
                      }
                      onChange={handleChange("idNumber")}
                      readOnly
                      disabled
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Program"
                      value={
                        isEditMode
                          ? updatedProfile.program
                          : studentProfile?.program
                      }
                      onChange={handleChange("program")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Year Level"
                      value={
                        isEditMode ? updatedProfile.year : studentProfile?.year
                      }
                      onChange={handleChange("year")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                </div>
              </div>
              {/* Additional Details */}
              <div>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Birth Date"
                      value={formatTime(studentProfile?.birthDate)}
                      onChange={handleChange("birthDate")}
                      readOnly={!isEditMode}
                      disabled={true}
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Contact Number"
                      value={
                        isEditMode
                          ? updatedProfile.contactNumber
                          : studentProfile?.contactNumber
                      }
                      onChange={handleChange("contactNumber")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full">
                    <TextInput
                      label="Address"
                      value={
                        isEditMode
                          ? `${updatedProfile.barangay}, ${updatedProfile.specificAddress}, ${updatedProfile.city}`
                          : `${studentProfile?.barangay}, ${studentProfile?.specificAddress}, ${studentProfile?.city}`
                      }
                      onChange={handleChangeAddress}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                </div>
              </div>
            </div>
            {/* Security Information */}
            <div className="w-full md:w-2/6">
              <div>
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  Security Information
                </h1>
                <div className="flex flex-col gap-6">
                  <TextInput
                    type="password"
                    id="currentPassword"
                    value={passwords.currentPassword}
                    onChange={handlePasswordChange("currentPassword")}
                    placeholder="Enter current password"
                    label="Current Password"
                    showInvalidPassword={showInvalidPassword.currentPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  {/* New Password */}
                  <TextInput
                    type="password"
                    id="newPassword"
                    value={passwords.newPassword}
                    onChange={handlePasswordChange("newPassword")}
                    placeholder="Enter new password"
                    label="New Password"
                    showInvalidPassword={showInvalidPassword.newPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  <TextInput
                    type="password"
                    id="confirmPassword"
                    value={passwords.confirmPassword}
                    onChange={handlePasswordChange("confirmPassword")}
                    placeholder="Confirm new password"
                    label="Confirm Password"
                    showInvalidPassword={showInvalidPassword.confirmPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                </div>
              </div>
            </div>
          </section>

          {isEditMode && (
            <div className="flex justify-end mt-4">
              <div className="flex flex-row gap-6 w-full">
                <HollowButton onClick={handleCancelEdit}>Cancel</HollowButton>
                <FullButton onClick={handleSaveProfile}>Save</FullButton>
              </div>
            </div>
          )}
        </div>
      </section>
    </div>
  );
}

```

// File: app\teacher\page.jsx
```
"use client";
import { default as Load, default as LoadingState } from "@/components/Load";
import Card from "@/components/ui/Card";
import Footer from "@/components/ui/Footer";
import { Navbar } from "@/components/ui/Navbar";
import PostCard from "@/components/ui/PostsCard";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import dynamic from "next/dynamic";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

function Home() {
	const [posts, setPosts] = useState([]);
	const [loading, setLoading] = useState(true);
	const router = useRouter();
	const userSession = getUserSession();

	const fetchPosts = async () => {
		try {
			const response = await fetch(`${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_POSTS}`, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${Cookies.get("token")}`,
				},
			});
			if (!response.ok) {
				throw new Error("Failed to fetch posts");
			}
			const data = await response.json();
			setPosts(data);
			setLoading(false);
		} catch (error) {
			console.error("Error fetching posts:", error);
			setLoading(false);
		}
	};

	/* Handling unauthenticated users */
	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession && userSession.role !== "teacher") {
		return <Load route={userSession.role} />;
	}

	useEffect(() => {
		fetchPosts();
	}, []);

	console.log(userSession);

	return (
		<div>
			<main className="min-h-screen">
				<Navbar userType="teacher" />
				<div
					className="pattern-overlay pattern-left absolute -z-10"
					style={{ transform: "scaleY(-1)", top: "-50px" }}
				>
					<img src="/images/landing/lleft.png" alt="pattern" />
				</div>
				<div
					className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
					style={{ transform: "scaleY(-1)", top: "-15px" }}
				>
					<img
						src="/images/landing/lright.png"
						alt="pattern"
						className="w-full h-full object-contain"
					/>
				</div>
				{/*Posts*/}
				<div className="flex flex-col md:flex-row py-24 px-4 md:px-12">
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 flex-grow-2 w-full md:w-11/12">
						<div className="max-w-8xl mx-auto px-5 flex w-full">
							<div className="flex flex-col  flex-grow-1 items-start my-6">
								<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
									Posts
								</h1>
								<p className="font-Jaldi text-xl sm:text-base">
									Check out the latest posts from the university's Guidance
									Counselor!
								</p>
							</div>
							{/* <div className="ml-auto relative">
								<GiSettingsKnobs
									className="fill-black stroke-0 hover:stroke-2 text-2xl cursor-pointer text-center"
									onClick={() =>
										setShowFilterModal((prev) => !prev)
									}
								/>
								{showFilterPostModal && (
									<div className="absolute w-30 h-22 px-1 shadow-xl bg-slate-100 border border-slate-300 text-slate-600 font-semibold right-0 top-7 z-20 rounded-xl">
										<ul className="p-2 cursor-pointer text-start">
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Latest");
													setShowFilterModal(false);
												}}>
												Latest
											</li>
											<li
												className="p-1 hover:bg-slate-200 rounded"
												onClick={() => {
													setSortPostBy("Oldest");
													setShowFilterModal(false);
												}}>
												Oldest
											</li>
										</ul>
									</div>
								)}
							</div> */}
						</div>
						<div className="w-full p-2 mx-auto flex-grow max-h-[90vh] overflow-y-auto">
							{loading ? (
								<LoadingState />
							) : posts.length === 0 ? ( // Check if the posts array is empty
								<p className="text-center mt-4 text-gray-500">
									No posts yet. Come back later.
								</p>
							) : (
								posts.map(
									(
										post // Use 'posts' instead of 'sortedPosts' if you haven't sorted the posts yet
									) => <PostCard key={post.postId} post={post} />
								)
							)}
						</div>
					</div>
					{/*Blogs*/}
					<div className="max-w-screen-xl mx-auto sm:px-12 lg:px-14 flex-grow-2 w-full">
						<div className="flex flex-col px-4 flex-grow-1 items-start my-6">
							<h1 className="text-2xl md:text-3xl font-Merriweather font-bold">
								Editor's Picks
							</h1>
							<p className="font-Jaldi text-xl sm:text-base">
								Check out the latest posts from the university's Guidance Counselor!
							</p>
						</div>
						<div className="w-full mx-auto flex-grow max-h-[90vh] overflow-y-auto">
							<Card />
						</div>
					</div>
				</div>
				<Footer />
			</main>
		</div>
	);
}

export default dynamic(() => Promise.resolve(Home), { ssr: false });

```

// File: app\teacher\inquiry\page.jsx
```
"use client";
import Questions from "@/components/ui/FAQs";
import Inquiry from "@/components/ui/Inquiry";
import { Navbar } from "@/components/ui/Navbar";
import { useSession } from "next-auth/react";

export default function StudentInquiry() {
  const { data: session, status } = useSession();
  const userId = session?.user.id;
  const faqList = [
    {
      question: "What is WellTalk?",
      answer:
        "WellTalk is a comprehensive platform designed to facilitate seamless communication and scheduling between students and counselors, ensuring a supportive environment for mental health and well-being.",
    },
    {
      question: "How do I schedule an appointment with a counselor on WellTalk?",
      answer:
        "To schedule an appointment with a counselor on WellTalk, log in to your account and navigate to the Appointments or Schedule section. From there, you can elect a convenient time slot and confirm your appointment.",
    },
    {
      question: "Is my information confidential and secure on WellTalk?",
      answer:
        "Yes, we take your privacy and security seriously on WellTalk. Your information is encrypted and stored securely according to industry standards. Only authorized personnel have access to your data, and we adhere to strict confidentiality protocols.",
    },

    {
      question: "Can I reschedule or cancel appointments?",
      answer:
        "Yes, you can reschedule or cancel appointments through your WellTalk account. Simply go to the Appointments section, locate the appointment you wish to change, and follow the prompts to adjust the date and time or cancel the appointment.",
    },
    {
      question: "Are there resources available for self-help and mental health tips?",
      answer:
        ": Absolutely! WellTalk provides a wealth of resources, including self-help guides, mental health tips, and informative articles to support your well-being journey. Explore our Resources section to access these valuable materials.",
    },
    {
      question: "Is WellTalk accessible on mobile devices?",
      answer:
        "Yes, WellTalk is fully accessible on mobile devices. We've designed the app to be responsive and user-friendly on smartphones and tablets, ensuring that you can access all features and functionalities seamlessly on the go.",
    },
  ];
  const contactMethods = [
    {
        icon:
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="#FFFFFF" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" />
            </svg>
        ,
        title: "Join our community",
        desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        link: {
            name: "Join our Discord",
            href: "javascript:void(0)"
        },
    },
    {
        icon:
            <svg className="w-6 h-6" viewBox="0 0 48 48" fill="#FFFFFF" xmlns="http://www.w3.org/2000/svg" stroke="#FFFFFF">
                <g clip-path="url(#clip0_17_80)">
                    <path d="M15.1003 43.5C33.2091 43.5 43.1166 28.4935 43.1166 15.4838C43.1166 15.0619 43.1072 14.6307 43.0884 14.2088C45.0158 12.815 46.679 11.0886 48 9.11066C46.205 9.90926 44.2993 10.4308 42.3478 10.6575C44.4026 9.42588 45.9411 7.491 46.6781 5.21159C44.7451 6.35718 42.6312 7.16528 40.4269 7.60128C38.9417 6.02318 36.978 4.97829 34.8394 4.62816C32.7008 4.27803 30.5064 4.64216 28.5955 5.66425C26.6846 6.68635 25.1636 8.30947 24.2677 10.2827C23.3718 12.2559 23.1509 14.4693 23.6391 16.5807C19.725 16.3842 15.8959 15.3675 12.4 13.5963C8.90405 11.825 5.81939 9.33893 3.34594 6.29909C2.0888 8.46655 1.70411 11.0314 2.27006 13.4722C2.83601 15.9131 4.31013 18.047 6.39281 19.44C4.82926 19.3904 3.29995 18.9694 1.93125 18.2119V18.3338C1.92985 20.6084 2.7162 22.8132 4.15662 24.5736C5.59704 26.334 7.60265 27.5412 9.8325 27.99C8.38411 28.3863 6.86396 28.4441 5.38969 28.1588C6.01891 30.1149 7.24315 31.8258 8.89154 33.0527C10.5399 34.2796 12.5302 34.9613 14.5847 35.0025C11.0968 37.7423 6.78835 39.2283 2.35313 39.2213C1.56657 39.2201 0.780798 39.1719 0 39.0769C4.50571 41.9676 9.74706 43.5028 15.1003 43.5Z" fill="#FFFFFFF" />
                </g>
                <defs>
                    <clipPath id="clip0_17_80">
                        <rect width="48" height="48" fill="white" />
                    </clipPath>
                </defs>
            </svg>

        ,
        title: "Follow us on Twitter",
        desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        link: {
            name: "Send us DMs",
            href: "javascript:void(0)"
        },
    },
]
  return (
    <div className="min-h-screen">
      <Navbar userType="teacher" />
      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>
      <main className="justify-center items-center h-full w-full">
        <Questions faqList={faqList} />
        <div className="w-full mx-auto p-6 text-gray-600 gap-12 lg:flex justify-center" style={{ backgroundColor: "#1F2724" }}>
          <div className="px-4 py-8 mx-auto sm:max-w-xl md:max-w-full lg:max-w-screen-xl md:px-24 lg:px-8 lg:py-12">
                <div className="max-w-md mb-12">
                    <h3 className=" text-3xl text-white font-semibold sm:text-4xl" style={{ backgroundColor: "#1F2724" }}>
                        Let‚Äôs connect
                    </h3>
                    <p className="mt-3 text-white">
                        We‚Äôre here to help and answer any question you might have, We look forward to hearing from you .
                    </p>
                </div>
                <div>
                    <ul className="mt-12 gap-y-6 gap-x-12 items-center md:flex lg:gap-x-0 lg:mt-0">
                        {
                            contactMethods.map((item, idx) => (
                                <li key={idx} className="space-y-3 border-t py-6 md:max-w-sm md:py-0 md:border-t-0 lg:border-l lg:px-12 lg:max-w-none">
                                    <div className="w-12 h-12 rounded-full border flex items-center justify-center text-gray-700">
                                        {item.icon}
                                    </div>
                                    <h4 className="text-gray-800 text-lg font-medium xl:text-xl text-white">
                                        {item.title}
                                    </h4>
                                    <p className="text-white">
                                        {item.desc}
                                    </p>
                                    <a href={item.link.href} className="flex items-center gap-1 text-sm duration-150 hover:text-white font-medium" style={{ color: "#6B9080" }}>
                                        {item.link.name}
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">
                                            <path fillRule="evenodd" d="M5 10a.75.75 0 01.75-.75h6.638L10.23 7.29a.75.75 0 111.04-1.08l3.5 3.25a.75.75 0 010 1.08l-3.5 3.25a.75.75 0 11-1.04-1.08l2.158-1.96H5.75A.75.75 0 015 10z" clipRule="evenodd" />
                                        </svg>
                                    </a>
                                </li>
                            ))
                        }
                    </ul>
                </div>
                </div>
            </div>
        <div className="flex justify-center">
          <div className="mx-auto w-2/3">
            {" "}
            {/* Adjust width as needed */}
            <Inquiry userId={userId} />
          </div>
        </div>
      </main>
    </div>
  );
}

```

// File: app\teacher\profile\page.jsx
```
"use client";
import Loading from "@/components/Loading";
import { Navbar } from "@/components/ui/Navbar";
import FullButton from "@/components/ui/buttons/FullButton";
import HollowButton from "@/components/ui/buttons/HollowButton";
import Dropdown from "@/components/ui/inputs/Dropdown";
import TextInput from "@/components/ui/inputs/TextInput";
import { imgDB } from "@/firebaseConfig";
import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import { collegeOptions } from "@/lib/inputOptions";
import { PlusIcon } from "@heroicons/react/solid";
import { getDownloadURL, ref, uploadBytes } from "firebase/storage";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import { v4 } from "uuid"; // Make sure this is configured correctly
import { logout } from "@/lib/helperFunctions";
import toast from "react-hot-toast";

export default function Profile() {
  const [isEditMode, setIsEditMode] = useState(false);
  const [editCollege, setEditCollege] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [teacherProfile, setTeacherProfile] = useState(null);
  const [updatedProfile, setUpdatedProfile] = useState({});
  const [loading, setLoading] = useState(true);
  const [passwords, setPasswords] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [showInvalidPassword, setShowInvalidPassword] = useState({
    currentPassword: false,
    newPassword: false,
    confirmPassword: false,
    passwordMismatch: false,
  });

  const userSession = getUserSession();
  console.log(userSession);

  useEffect(() => {
    const fetchTeacherProfile = async () => {
      try {
        const response = await fetch(
          `${process.env.BASE_URL}${API_ENDPOINT.GET_TEACHER_BY_ID}${userSession.id}`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${Cookies.get("token")}`,
            },
          }
        );
        if (!response.ok) {
          throw new Error("Failed to fetch posts");
        }
        const data = await response.json();
        setTeacherProfile(data);
        setUpdatedProfile(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching posts:", error);
        setLoading(false);
      }
    };

    fetchTeacherProfile();
  }, []);

  if (userSession && userSession.role !== "teacher") {
    return <Loading route={userSession.role} />;
  }

  const handleUpdateProfile = () => {
    setIsEditMode(true);
    setEditCollege(true);
  };

  const validatePassword = (password) => {
    const regex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return regex.test(password);
  };

  const handleChange = (key) => (e) => {
    const value = e.target.value;
    setUpdatedProfile((prevProfile) => ({
      ...prevProfile,
      [key]: value,
    }));
  };

  const handleCancelEdit = () => {
    setIsEditMode(false);
    setUpdatedProfile(teacherProfile);
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();
    if (passwords.newPassword !== passwords.confirmPassword) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        passwordMismatch: true,
      }));
      return;
    }

    if (passwords.newPassword && !validatePassword(passwords.newPassword)) {
      setShowInvalidPassword((prevShowInvalidPassword) => ({
        ...prevShowInvalidPassword,
        newPassword: true,
      }));
      toast.error(
        "Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character."
      );
      return;
    }

    try {
      const response = await fetch(
        `${process.env.BASE_URL}${API_ENDPOINT.UPDATE_TEACHER}${userSession.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
          body: JSON.stringify({
            institutionalEmail: updatedProfile.institutionalEmail,
            idNumber: updatedProfile.idNumber,
            firstName: updatedProfile.firstName,
            lastName: updatedProfile.lastName,
            gender: updatedProfile.gender,
            password: updatedProfile.password,
            image: updatedProfile.image,
            college: updatedProfile.college,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Server error response:", errorData);
        throw new Error(
          `Failed to update teacher profile: ${response.statusText}`
        );
      }

      if (passwords.newPassword && passwords.confirmPassword) {
        try {
          const passwordResponse = await fetch(
            `${process.env.BASE_URL}${API_ENDPOINT.CHANGE_PASSWORD}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${Cookies.get("token")}`,
              },
              body: JSON.stringify({
                email: updatedProfile.institutionalEmail,
                oldPassword: passwords.currentPassword,
                newPassword: passwords.newPassword,
              }),
            }
          );

          if (!passwordResponse.ok) {
            const errorData = await passwordResponse.json();
            console.error("Server error response:", errorData);
            throw new Error(
              `Failed to update password: ${passwordResponse.statusText}`
            );
          } else {
            toast.success(
              "Profile updated successfully. You will be logged out for security reasons. Please log in again."
            );
            setTimeout(() => {
              logout();
            }, 3000);
          }
        } catch (error) {
          console.error("Error updating password:", error);
        }
      }

      const data = await response.json();
      setTeacherProfile(data);
      setIsEditMode(false);
    } catch (error) {
      console.error("Error updating teacher profile:", error);
    }
  };

  const handlePasswordChange = (label) => (e) => {
    const pw = e.target.value;

    setPasswords((prevPasswords) => ({
      ...prevPasswords,
      [label]: pw,
    }));

    setShowInvalidPassword((prevShowInvalidPassword) => ({
      ...prevShowInvalidPassword,
      [label]: pw && !validatePassword(pw),
      passwordMismatch:
        label === "confirmPassword" ? pw !== passwords.newPassword : false,
    }));
  };

  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (file) {
      const imgRef = ref(imgDB, `UserAvatars/${v4()}`);
      const snapshot = await uploadBytes(imgRef, file);
      const imgUrl = await getDownloadURL(snapshot.ref);
      setUpdatedProfile((prevProfile) => ({
        ...prevProfile,
        image: imgUrl,
      }));
    }
  };

  if (loading) {
    return <Loading />;
  }

  return (
    <div className="p-4 mt-16 md:p-12">
      <Navbar userType="teacher" />
      <div
        className="pattern-overlay pattern-left absolute -z-10"
        style={{ transform: "scaleY(-1)", top: "-50px" }}
      >
        <img src="/images/landing/lleft.png" alt="pattern" />
      </div>
      <div
        className="pattern-overlay pattern-right absolute bottom-0 right-0 -z-10"
        style={{ transform: "scaleY(-1)", top: "-15px" }}
      >
        <img
          src="/images/landing/lright.png"
          alt="pattern"
          className="w-full h-full object-contain"
        />
      </div>
      <section className="w-full pt-4 md:mt-6 p-8 md:p-12 flex flex-col justify-center items-center">
        <div className="w-full max-w-screen-lg mx-auto flex flex-col gap-4 md:gap-8">
          <section className="flex flex-col md:flex-row md:gap-10 mb-8 justify-center items-center">
            {/* Avatar */}
            <div className="w-full md:w-2/12 flex justify-center items-center avatar relative">
              <div className="w-48 rounded-full ring ring-[#6B9080] ring-offset-base-100 ring-offset-1">
                <img src={teacherProfile?.image} alt="avatar" />
                {isEditMode && (
                  <label
                    htmlFor="file-upload"
                    className="absolute bottom-0 right-5 bg-primary-green text-white p-1 rounded-full cursor-pointer"
                  >
                    <input
                      id="file-upload"
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleFileChange}
                    />
                    <PlusIcon className="h-5 w-5 text-white" />
                  </label>
                )}
              </div>
            </div>
            {/* User Info */}
            <div className="w-full md:w-10/12 flex flex-col justify-center md:mt-0 mt-4">
              <h1 className="font-Merriweather text-2xl md:text-4xl font-bold tracking-tight mt-4">
                Hello, {teacherProfile?.firstName} {teacherProfile?.lastName}
              </h1>
              <p className="font-Merriweather tracking-tight font-thin my-2">
                {teacherProfile?.institutionalEmail}
              </p>
              <div className="w-full md:w-5/12 mt-1">
                {!isEditMode && (
                  <FullButton onClick={handleUpdateProfile}>
                    Update Profile
                  </FullButton>
                )}
              </div>
            </div>
          </section>

          <section className="flex flex-col md:flex-row gap-6 md:gap-10 mt-2">
            {/* User Information */}
            <div className="w-full md:w-4/6">
              <div className="">
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  User Information
                </h1>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-full">
                    <TextInput
                      label="First Name"
                      value={
                        isEditMode
                          ? updatedProfile?.firstName
                          : teacherProfile?.firstName
                      }
                      onChange={handleChange("firstName")}
                      placeholder="First Name"
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                  <div className="w-full md:w-full">
                    <TextInput
                      label="Last Name"
                      value={
                        isEditMode
                          ? updatedProfile.lastName
                          : teacherProfile?.lastName
                      }
                      onChange={handleChange("lastName")}
                      readOnly={!isEditMode}
                      disabled={!isEditMode}
                    />
                  </div>
                </div>
              </div>
              {/* College Information */}
              <div>
                <div className="flex flex-col md:flex-row gap-4 pb-6">
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="ID Number"
                      value={
                        isEditMode
                          ? updatedProfile.idNumber
                          : teacherProfile?.idNumber
                      }
                      onChange={handleChange("idNumber")}
                      readOnly
                      disabled
                    />
                  </div>
                  <div className="w-full md:w-1/2">
                    <TextInput
                      label="Gender"
                      value={
                        isEditMode
                          ? updatedProfile.gender
                          : teacherProfile?.gender
                      }
                      onChange={handleChange("gender")}
                      readOnly
                      disabled
                    />
                  </div>
                </div>
              </div>
              <div>
                <div className="w-full pb-6">
                  {/* {editCollege ? (
										<Dropdown
											label="Department"
											value={
												updatedProfile.college ||
												teacherProfile?.college ||
												""
											}
											onChange={(value) =>
												setUpdatedProfile(
													(prevProfile) => ({
														...prevProfile,
														college: value,
													})
												)
											}
											readOnly={!isEditMode}
											disabled={!isEditMode}
											dropdownOptions={collegeOptions}
											isEditMode={isEditMode}
										/>
									) : ( */}
                  <TextInput
                    label="Department"
                    value={
                      updatedProfile.college || teacherProfile?.college || ""
                    }
                    onChange={(e) =>
                      setUpdatedProfile((prevProfile) => ({
                        ...prevProfile,
                        college: e.target.value,
                      }))
                    }
                    readOnly
                    disabled
                    // style={{ display: isEditMode ? "none" : "block" }}
                  />
                  {/* )} */}
                </div>
              </div>
              {/* Additional Details */}
            </div>
            {/* Security Information */}
            <div className="w-full md:w-2/6">
              <div>
                <h1 className="font-Merriweather text-slate-600 text-2xl font-semibold tracking-tight py-4">
                  Security Information
                </h1>
                <div className="flex flex-col gap-6">
                  <TextInput
                    type="password"
                    id="currentPassword"
                    value={passwords.currentPassword}
                    onChange={handlePasswordChange("currentPassword")}
                    placeholder="Enter current password"
                    label="Current Password"
                    showInvalidPassword={showInvalidPassword.currentPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />

                  {/* New Password */}
                  <TextInput
                    type="password"
                    id="newPassword"
                    value={passwords.newPassword}
                    onChange={handlePasswordChange("newPassword")}
                    placeholder="Enter new password"
                    label="New Password"
                    showInvalidPassword={showInvalidPassword.newPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                  <TextInput
                    type="password"
                    id="confirmPassword"
                    value={passwords.confirmPassword}
                    onChange={handlePasswordChange("confirmPassword")}
                    placeholder="Confirm new password"
                    label="Confirm Password"
                    showInvalidPassword={showInvalidPassword.confirmPassword}
                    readOnly={!isEditMode}
                    disabled={!isEditMode}
                  />
                </div>
              </div>
            </div>
          </section>

          {isEditMode && (
            <div className="flex justify-end mt-4">
              <div className="flex flex-row gap-6 w-full">
                <HollowButton onClick={handleCancelEdit}>Cancel</HollowButton>
                <FullButton onClick={handleSaveProfile}>Save</FullButton>
              </div>
            </div>
          )}
        </div>
      </section>
    </div>
  );
}

```

// File: app\teacher\referral\page.jsx
```
"use client";

import hdrReferrals from "@/public/images/headers/hdrReferrals.png";
import { useEffect, useState } from "react";

// css
import "@/styles/counselor.css";

// modals
import Header from "@/components/Header";
import Load from "@/components/Load";
import { Navbar } from "@/components/ui/Navbar";
import ModalDelete from "@/components/ui/modals/counselor/inquiries/ModalDelete";
import AddReferral from "@/components/ui/modals/teacher/AddReferral";
import ReferralInfo from "@/components/ui/modals/teacher/ReferralInfo";

import { API_ENDPOINT } from "@/lib/api";
import { getUserSession } from "@/lib/helperFunctions";
import Cookies from "js-cookie";
import dynamic from "next/dynamic";

const TableTitle = ({ addReferral }) => {
	return (
		<div className="flex flex-row justify-between items-center mb-3">
			<h1 className="font-Merriweather text-lg ">Referral Records</h1>
			<button
				className="w-36 font-Merriweather text-sm px-6 py-2 border border-black rounded-lg hover:bg-[#6B9080] hover:text-white hover:border-white transition duration-300 ease-in-out"
				onClick={addReferral}
			>
				Add Referral
			</button>
		</div>
	);
};

const TableHeaders = ({ handleSort }) => {
	return (
		<thead>
			<tr className="bg-gray-200 font-bold">
				<th
					className="hover:bg-gray-300 cursor-pointer p-5 text-center"
					onClick={() => handleSort("id")}
					style={{ width: "5%" }}
				>
					ID
				</th>
				<th>Date and Time</th>
				<th className="p-5">ID Number</th>
				<th>Referred Student</th>
				<th className="">Reason</th>
				<th
					className="hover:bg-gray-300 cursor-pointer p-5 text-center"
					onClick={() => handleSort("status")}
					style={{ width: "10%" }}
				>
					Status
				</th>
				{/* Delete and Edit*/}
				<th className="no-hover-highlight"></th>
			</tr>
		</thead>
	);
};

const TableBody = ({ currentList, handleRowClick, showDeleteModal }) => {
	return (
		<tbody>
			{currentList.map((referrals) => (
				<tr
					key={referrals.referralId}
					onClick={() => handleRowClick(referrals.referralId)}
					className="cursor-pointer hover:bg-gray-200 transition duration-300 ease-in-out"
				>
					<td className="text-center">{referrals.referralId}</td>
					<td>
						<div className="flex flex-row gap-x-3">
							<div className="text-sm">{referrals.dateOfRefferal}</div>
						</div>
					</td>
					<td>
						<div className="flex flex-row gap-x-3">
							<div>{referrals.studentId}</div>
						</div>
					</td>
					<td>
						<div className="flex items-center gap-3">
							<div>{referrals.studentEmail}</div>
						</div>
					</td>
					<td>
						<p>
							{referrals?.reason?.length > 50
								? `${referrals?.reason?.substring(0, 40)}...`
								: referrals?.reason}
						</p>
					</td>
					<td className="text-center">
						<div
							className={`w-24 h-5 badge badge-xs ${
								referrals && referrals.status === "Pending"
									? "badge-warning"
									: referrals && referrals.status === "Responded"
									? "badge-success"
									: referrals && referrals.status === "Accepted"
									? "badge-info"
									: ""
							}`}
						>
							{referrals.status}
						</div>
					</td>

					<td>
						<div className="flex flex-row justify-center items-center gap-x-5">
							<button
								className="btn btn-xs"
								onClick={(e) => {
									e.stopPropagation();
									showDeleteModal(referrals.id);
								}}
							>
								Delete
							</button>
							<button className="btn btn-xs text-green-700">Edit</button>
						</div>
					</td>
				</tr>
			))}
		</tbody>
	);
};

const PaginationControls = ({ currentPage, setCurrentPage, list }) => {
	const ReferralsPerPage = 10;

	return (
		<div className="join pt-5 flex flex-row justify-center">
			<button
				onClick={() => setCurrentPage(currentPage - 1)}
				disabled={currentPage === 1}
				className="join-item btn w-28"
			>
				Previous
			</button>
			{[...Array(Math.ceil(list.length / ReferralsPerPage))].map((_, index) => (
				<button
					key={index}
					className={`join-item btn ${currentPage === index + 1 ? "btn-active" : ""}`}
					onClick={() => setCurrentPage(index + 1)}
				>
					{index + 1}
				</button>
			))}
			<button
				onClick={() => setCurrentPage(currentPage + 1)}
				disabled={ReferralsPerPage > list.length}
				className="join-item btn w-28"
			>
				Next
			</button>
		</div>
	);
};

const Referral = () => {
	const ReferralsPerPage = 10;
	const userSession = getUserSession();

	const [selectedID, setSelectedID] = useState(null);
	const [currentPage, setCurrentPage] = useState(1);

	//modals
	const [deleteModal, setDeleteModal] = useState(false);
	const [referralModal, setReferralModal] = useState(null);
	const [addReferral, setAddReferral] = useState(false);

	// referrals sample
	const [referrals, setReferrals] = useState([{}]);

	/* Handling unauthenticated users */
	if (Cookies.get("token") === undefined || Cookies.get("token") === null) {
		return <Load route="login" />;
	}

	if (userSession && userSession.role !== "teacher") {
		return <Load route={userSession.role} />;
	}
	// sorting
	const [sortOrder, setSortOrder] = useState("asc");

	const handleRowClick = (id) => {
		setSelectedID(id);
		setReferralModal(true);
	};

	const showDeleteModal = (id) => {
		setSelectedID(id);
		setDeleteModal(true);
	};

	const handleDelete = () => {
		// Find
		const selected = referrals.find((referral) => referral.id === selectedID);

		// Delete
		const newReffera = referrals.filter(
			//
			(referral) => referral.id !== selectedID
		);
		setReferrals(newReffera);

		// Reset
		setDeleteModal(false);
		setSelectedID(null);
	};

	// Calculate the index range of refferal to display for the current page
	const indexOfLastInquiry = currentPage * ReferralsPerPage;
	const indexOfFirstInquiry = indexOfLastInquiry - ReferralsPerPage;
	const currentList = referrals.slice(indexOfFirstInquiry, indexOfLastInquiry);

	const handleSort = (column) => {
		const order = sortOrder === "asc" ? "desc" : "asc";
		setSortOrder(order);
		const sortedList = [...referrals].sort((a, b) => {
			if (column === "id") {
				return order === "asc" ? a.id - b.id : b.id - a.id;
				// }
				// else if (column === "dateTime") {
				// 	// Combine date and time strings into a single Date object for comparison
				// 	const dateTimeA = new Date(`${a.date} ${a.timeStart}`);
				// 	const dateTimeB = new Date(`${b.date} ${b.timeStart}`);
				// 	return order === "asc" ? dateTimeA - dateTimeB : dateTimeB - dateTimeA;
			} else if (column === "status") {
				// Define priority order for status
				const statusOrder = ["Pending", "Accepted"];
				return order === "asc"
					? statusOrder.indexOf(a.status) - statusOrder.indexOf(b.status)
					: statusOrder.indexOf(b.status) - statusOrder.indexOf(a.status);
			}
			return 0;
		});
		setReferrals(sortedList);
	};

	const fetchReferrals = async () => {
		try {
			const response = await fetch(
				`${process.env.BASE_URL}${API_ENDPOINT.GET_ALL_REFERRALS}`,
				{
					method: "GET",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${Cookies.get("token")}`,
					},
				}
			);
			if (!response.ok) {
				throw new Error("Failed to fetch referrals");
			}
			const data = await response.json();

			setReferrals(
				data.filter((referral) => referral.teacher.institutionalEmail === userSession.email)
			);
		} catch (error) {
			console.error("Error fetching posts:", error);
		}
	};

	useEffect(() => {
		if (userSession) {
			fetchReferrals();
		}
	}, []);

	console.log(referrals);

	return (
		<div className="min-h-screen w-full">
			<Navbar userType="teacher" />
			<Header
				image={hdrReferrals.src}
				desc="Unlock student potential! Teachers, utilize this referral portal to recommend students who could thrive with counseling support. Your insight fuels our commitment to student well-being and success."
			/>

			<div className="flex flex-col">
				<div className="overflow-x-auto px-56 py-10">
					<TableTitle addReferral={setAddReferral} />

					<table className="table bg-gray-100">
						<TableHeaders handleSort={handleSort} />
						<TableBody
							currentList={currentList}
							handleRowClick={handleRowClick}
							showDeleteModal={showDeleteModal}
						/>
					</table>

					<PaginationControls
						currentPage={currentPage}
						setCurrentPage={setCurrentPage}
						list={referrals}
					/>
				</div>
			</div>

			{deleteModal && (
				<ModalDelete
					setDeleteModal={setDeleteModal}
					handleDelete={handleDelete}
				></ModalDelete>
			)}

			{referralModal && (
				<ReferralInfo
					setReferralModal={setReferralModal}
					selectedID={selectedID}
					referrals={referrals}
				></ReferralInfo>
			)}

			{addReferral && (
				<AddReferral teacherId={userSession.id} onOpen={setAddReferral}></AddReferral>
			)}
		</div>
	);
};

export default dynamic(() => Promise.resolve(Referral), { ssr: false });

```

// File: app\teacher\[blogId]\page.jsx
```
"use client";

import Image from "next/image";

const Blog = ({ params }) => {
  // const { blogId } = useParams();
  console.log(params.blogId);
  return <div className="w-full h-screen bg-slate-700"></div>;
};

export default Blog;

```

// File: app\[token]\changepassword\page.jsx
```
"use client";

import { useState, useEffect } from "react";
import { useSearchParams, usePathname } from "next/navigation";

// imgs
import bgChangePass from "@/public/images/bgs/bgChangePass.jpg";
import ModalChangePassword from "@/components/ui/modals/ForgotPassword/ModalChangePassword";

const ChangePassword = () => {
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const [isTokenReady, setIsTokenReady] = useState(false);
  const [token, setToken] = useState(null);

  useEffect(() => {
    if (pathname && searchParams) {
      const tokenFromPath = pathname.split("/")[1]; // Get the token from the path
      setToken(tokenFromPath);
      setIsTokenReady(true);
    }
  }, [pathname, searchParams]);

  if (!isTokenReady) {
    return <p>Loading...</p>;
  }

  return (
    <div
      className="min-h-screen w-full relative"
      style={{
        minHeight: "100vh",
      }}
    >
      <div
        className="absolute inset-0"
        style={{
          backgroundImage: `url(${bgChangePass.src})`,
          backgroundSize: "cover",
          backgroundPosition: "center right",
          backgroundAttachment: "fixed",
          filter: "blur(5px)",
          zIndex: -1,
        }}
      />

      <ModalChangePassword token={token} />
    </div>
  );
};

export default ChangePassword;

```
